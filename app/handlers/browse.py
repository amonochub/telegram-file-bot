import os
import tempfile

import structlog
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, FSInputFile, Message, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.config import settings
from app.services.yandex_disk_service import YandexDiskService
from app.config import USER_FILES_DIR

router = Router()
logger = structlog.get_logger()

yandex_service = YandexDiskService(settings.yandex_disk_token)

# –ö—ç—à –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –ø—É—Ç–µ–π –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ ID
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram callback_data (64 –±–∞–π—Ç–∞)
# –í–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ—Ä–æ—Ç–∫–∏–π —á–∏—Å–ª–æ–≤–æ–π ID
path_cache = {}
id_counter = 1


def get_path_id(path: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è –ø—É—Ç–∏"""
    global id_counter
    if path not in path_cache:
        path_cache[path] = str(id_counter)
        id_counter += 1
    return path_cache[path]


def get_path_by_id(path_id: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –ø–æ ID"""
    for path, pid in path_cache.items():
        if pid == path_id:
            return path
    return ""


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def check_yandex_connection():
    try:
        connected = await yandex_service.check_connection()
        if connected:
            logger.info("Yandex.Disk connection successful")
        else:
            logger.warning("Yandex.Disk connection failed")
        return connected
    except Exception as e:
        logger.error("Yandex.Disk connection error", error=str(e))
        return False


PAGE_SIZE = 20


class BrowseStates(StatesGroup):
    waiting_new_folder_name = State()


@router.message(Command("files"))
async def files_command(message: Message):
    logger.info("files_command", user_id=message.from_user.id)
    user_path = USER_FILES_DIR
    await show_directory(message, user_path)


@router.message(Command("disk_info"))
async def disk_info_command(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ"""
    logger.info("disk_info_command", user_id=message.from_user.id)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ
        disk_info = await yandex_service.get_disk_info()

        if disk_info:
            used_space = yandex_service.format_file_size(disk_info.get("used_space", 0))
            total_space = yandex_service.format_file_size(disk_info.get("total_space", 0))
            free_space = yandex_service.format_file_size(disk_info.get("free_space", 0))

            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            used_percent = 0
            if disk_info.get("total_space", 0) > 0:
                used_percent = (disk_info.get("used_space", 0) / disk_info.get("total_space", 0)) * 100

            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            progress_bar_length = 20
            filled_length = int((used_percent / 100) * progress_bar_length)
            progress_bar = "‚ñà" * filled_length + "‚ñë" * (progress_bar_length - filled_length)

            info_text = (
                f"üíæ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ</b>\n\n"
                f"üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {used_space} –∏–∑ {total_space}\n"
                f"üìà <b>–°–≤–æ–±–æ–¥–Ω–æ:</b> {free_space}\n"
                f"üìä <b>–ó–∞–ø–æ–ª–Ω–µ–Ω–æ:</b> {used_percent:.1f}%\n\n"
                f"<code>{progress_bar}</code> {used_percent:.1f}%\n\n"
                f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {disk_info.get('updated', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
            )

            await message.answer(info_text, parse_mode="HTML")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ")

    except Exception as e:
        logger.error("Error getting disk info", error=str(e))
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ")


@router.message(Command("cleanup"))
async def cleanup_command(message: Message):
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    logger.info("cleanup_command", user_id=message.from_user.id)

    try:
        from app.utils.cleanup import cleanup_temp_files, get_temp_dir_size, format_size
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ –æ—á–∏—Å—Ç–∫–∏
        size_before = get_temp_dir_size()
        
        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
        deleted_count = cleanup_temp_files(max_age_hours=1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        size_after = get_temp_dir_size()
        
        info_text = (
            f"üßπ <b>–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:</b> {deleted_count}\n"
            f"üìä <b>–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞:</b> {format_size(size_before - size_after)}\n"
            f"üíæ <b>–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä temp:</b> {format_size(size_after)}\n\n"
            f"‚è∞ <b>–£–¥–∞–ª–µ–Ω—ã —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞</b>"
        )
        
        await message.answer(info_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error("Error during cleanup", error=str(e))
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")


async def show_directory(message: Message, path: str, page: int = 0, edit: bool = False):
    try:
        logger.info("show_directory_called", path=path, user_id=message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏
            files_list = await yandex_service.get_files_list(path)
            logger.debug("files_list_retrieved", count=len(files_list), path=path)

            if not files_list:
                text = f"üìÅ –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞: {path}"
                if edit:
                    await message.edit_text(text, parse_mode="HTML")
                else:
                    await message.answer(text, parse_mode="HTML")
                return
        except Exception as e:
            # –ï—Å–ª–∏ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = (
                "‚ö†Ô∏è <b>–Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞:\n"
                "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://yandex.ru/dev/disk/poligon/\n"
                "2. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π OAuth-—Ç–æ–∫–µ–Ω\n"
                "3. –û–±–Ω–æ–≤–∏—Ç–µ YANDEX_DISK_TOKEN –≤ —Ñ–∞–π–ª–µ .env\n"
                "4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n\n"
                "üìã <i>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ —Ñ–∞–π–ª–µ GET_YANDEX_TOKEN.md</i>"
            )
            if edit:
                await message.edit_text(text, parse_mode="HTML")
            else:
                await message.answer(text, parse_mode="HTML")
            return

        builder = InlineKeyboardBuilder()
        user_root = USER_FILES_DIR
        if path != user_root and path.startswith(user_root):
            parent_path = os.path.dirname(path.rstrip("/"))
            builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"browse:{get_path_id(parent_path)}")

        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã
        folders = [f for f in files_list if f["type"] == "dir"]
        files = [f for f in files_list if f["type"] == "file"]

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        all_items = []
        for folder in folders:
            all_items.append({"type": "folder", "data": folder})
        for file in files:
            all_items.append({"type": "file", "data": file})

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        start = page * PAGE_SIZE
        end = start + PAGE_SIZE
        page_items = all_items[start:end]

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        for item in page_items:
            if item["type"] == "folder":
                folder = item["data"]
                builder.button(text=f"üìÅ {folder['name']}", callback_data=f"browse:{get_path_id(folder['path'])}")
            elif item["type"] == "file":
                file = item["data"]
                file_size = yandex_service.format_file_size(file["size"])
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ñ–∞–π–ª–∞
                file_row = []
                file_row.append(
                    InlineKeyboardButton(
                        text=f"üìÑ {file['name']} ({file_size})",
                        callback_data=f"download_file:{get_path_id(file['path'])}"
                    )
                )
                file_row.append(
                    InlineKeyboardButton(
                        text="üóëÔ∏è",
                        callback_data=f"delete_file:{get_path_id(file['path'])}"
                    )
                )
                builder.row(*file_row)

        # pagination buttons
        total_items = len(folders) + len(files)
        total_pages = (total_items - 1) // PAGE_SIZE + 1 if total_items > 0 else 1
        if total_pages > 1:
            pag_row = []
            if page > 0:
                pag_row.append(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"browse_page:{get_path_id(path)}:{page - 1}")
                )
            pag_row.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="noop"))
            if page < total_pages - 1:
                pag_row.append(
                    InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"browse_page:{get_path_id(path)}:{page + 1}")
                )
            builder.row(*pag_row)

        # button to create folder
        builder.button(text="‚ûï –ù–æ–≤–∞—è –ø–∞–ø–∫–∞", callback_data=f"browse_mkdir:{get_path_id(path)}")
        builder.adjust(1)
        text = f"üìÅ <b>{path}</b>\n\nüìä –ü–∞–ø–æ–∫: {len(folders)}  –§–∞–π–ª–æ–≤: {len(files)}  (—Å—Ç—Ä. {page + 1}/{total_pages})"
        if edit:
            await message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        else:
            await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    except Exception as e:
        logger.error("Error showing directory", error=str(e), path=path)

        # –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if "Forbidden" in str(e) or "403" in str(e):
            error_text = "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞."
        elif "Not Found" in str(e) or "404" in str(e):
            error_text = "‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ."
        else:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–ø–∫–∏: {e}"

        if edit:
            await message.edit_text(error_text, parse_mode="HTML")
        else:
            await message.answer(error_text, parse_mode="HTML")


@router.callback_query(F.data.startswith("browse:"))
async def browse_callback(callback: CallbackQuery):
    path = get_path_by_id(callback.data.replace("browse:", ""))
    await show_directory(callback.message, path, page=0, edit=True)
    await callback.answer()


@router.callback_query(F.data.startswith("browse_page:"))
async def browse_page_callback(callback: CallbackQuery):
    data = callback.data.replace("browse_page:", "").split(":")
    path = get_path_by_id(data[0])
    page = int(data[1])
    await show_directory(callback.message, path, page=page, edit=True)
    await callback.answer()


@router.callback_query(F.data.startswith("browse_mkdir:"))
async def browse_mkdir_prompt(callback: CallbackQuery, state: FSMContext):
    path = get_path_by_id(callback.data.replace("browse_mkdir:", ""))
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏:")
    await state.update_data(mkdir_path=path)
    await state.set_state(BrowseStates.waiting_new_folder_name)
    await callback.answer()


@router.message(BrowseStates.waiting_new_folder_name)
async def browse_mkdir_create(msg: Message, state: FSMContext):
    data = await state.get_data()
    base_path = data.get("mkdir_path", "/")
    new_path = os.path.join(base_path, msg.text.strip())
    success = await yandex_service.create_folder(new_path)
    if success:
        await msg.answer("‚úÖ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
    else:
        await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É")
    await show_directory(msg, base_path)
    await state.clear()


@router.callback_query(F.data.startswith("download_file:"))
async def download_callback(callback: CallbackQuery):
    file_path = get_path_by_id(callback.data.replace("download_file:", ""))
    file_name = os.path.basename(file_path)

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_msg = await callback.message.answer("‚è≥ –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        with tempfile.NamedTemporaryFile(delete=False, suffix=f"_{file_name}") as temp_file:
            temp_path = temp_file.name

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        success = await yandex_service.download_file(file_path, temp_path)

        if success and os.path.exists(temp_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram
            from aiogram.types import FSInputFile

            await callback.message.answer_document(
                FSInputFile(temp_path, filename=file_name), caption=f"üì• –§–∞–π–ª: {file_name}"
            )

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_path)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            await loading_msg.delete()
        else:
            await loading_msg.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª {file_name}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_name}: {str(e)}")
    await callback.answer()


@router.callback_query(F.data.startswith("delete_file:"))
async def delete_file_callback(callback: CallbackQuery):
    file_path = get_path_by_id(callback.data.replace("delete_file:", ""))
    file_name = os.path.basename(file_path)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete:{callback.data.replace('delete_file:', '')}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete:{callback.data.replace('delete_file:', '')}")
    builder.adjust(2)
    
    await callback.message.answer(
        f"üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª <b>{file_name}</b>?\n\n"
        f"üìÅ –ü—É—Ç—å: <code>{file_path}</code>\n\n"
        "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete:"))
async def confirm_delete_callback(callback: CallbackQuery):
    file_path = get_path_by_id(callback.data.replace("confirm_delete:", ""))
    file_name = os.path.basename(file_path)
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É–¥–∞–ª–µ–Ω–∏–∏
        loading_msg = await callback.message.answer("üóëÔ∏è –£–¥–∞–ª—è—é —Ñ–∞–π–ª...")
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
        success = await yandex_service.remove_file(file_path)
        
        if success:
            await loading_msg.edit_text(f"‚úÖ –§–∞–π–ª <b>{file_name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        else:
            await loading_msg.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_name}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_name}: {str(e)}")
    await callback.answer()


@router.callback_query(F.data.startswith("cancel_delete:"))
async def cancel_delete_callback(callback: CallbackQuery):
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()
