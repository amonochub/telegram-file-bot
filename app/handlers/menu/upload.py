"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
"""

import structlog
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
import os
import tempfile

from app.constants.messages import (
    UPLOAD_MENU_TEXT,
    UPLOAD_INSTRUCTIONS,
    LOG_UPLOAD_MENU_TRIGGERED,
)
from app.keyboards.menu import main_menu
from app.utils.file_router import determine_path
from app.config import settings, USER_FILES_DIR

router = Router()
log = structlog.get_logger()


@router.message(F.text == "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
async def upload_menu(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤"

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
    """
    log.info(LOG_UPLOAD_MENU_TRIGGERED, text=message.text, user_id=message.from_user.id)
    # await state.clear()  # –£–¥–∞–ª—è–µ–º —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏
    await state.update_data(upload_mode=True)
    await message.answer(
        UPLOAD_INSTRUCTIONS
        + "\n\n<b>üìù –§–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞:</b>\n"
        + "<code>–ü—Ä–∏–Ω—Ü–∏–ø–∞–ª_–ê–≥–µ–Ω—Ç_–≤–∏–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞_–Ω–æ–º–µ—Ä_–¥–∞—Ç–∞</code>\n\n"
        + "<b>‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</b>\n"
        + "‚Ä¢ <code>–ê–ª—å—Ñ–∞—Ç—Ä–µ–∫—Å_–ê–≥—Ä–∏–∫–æ_–∞–≥–µ–Ω—Ç—Å–∫–∏–π –¥–æ–≥–æ–≤–æ—Ä_2_300525.docx</code>\n"
        + "‚Ä¢ <code>–°–±–µ—Ä–±–∞–Ω–∫_–ò–ü –ò–≤–∞–Ω–æ–≤_–ø–æ—Ä—É—á–µ–Ω–∏–µ_15_280725.pdf</code>\n"
        + "‚Ä¢ <code>–í–¢–ë_–û–û–û –†–æ–≥–∞_–∞–∫—Ç-–æ—Ç—á–µ—Ç_7_150124.docx</code>\n\n"
        + "<b>‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</b>\n"
        + "‚Ä¢ <code>–î–æ–≥–æ–≤–æ—Ä.pdf</code> (–Ω–µ–ø–æ–ª–Ω–æ–µ –∏–º—è)\n"
        + "‚Ä¢ <code>–ê–ª—å—Ñ–∞—Ç—Ä–µ–∫—Å@–ê–≥—Ä–∏–∫–æ_–¥–æ–≥–æ–≤–æ—Ä_2_300525.docx</code> (—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã)\n"
        + "‚Ä¢ <code>–ê–ª—å—Ñ–∞—Ç—Ä–µ–∫—Å_–ê–≥—Ä–∏–∫–æ_–¥–æ–≥–æ–≤–æ—Ä_2_30.05.25.docx</code> (—Ç–æ—á–∫–∏ –≤ –¥–∞—Ç–µ)\n\n"
        + "<b>üí° –°–æ–≤–µ—Ç—ã:</b>\n"
        + "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è\n"
        + "‚Ä¢ –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î–ú–ú–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 300525 = 30.05.2025)\n"
        + "‚Ä¢ –ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ - —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã\n"
        + "‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ —ç–º–æ–¥–∑–∏!",
        parse_mode="HTML",
        reply_markup=main_menu(),
    )


@router.message(F.document)
async def handle_manual_upload(msg: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

    Args:
        msg: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
    """
    log.info("handle_manual_upload invoked", user_id=msg.from_user.id)
    log.info("Document received", filename=msg.document.file_name if msg.document else "No document")
    data = await state.get_data()
    log.info("FSM data", data=data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ OCR
    # ocr_mode –∏ upload_mode - –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ —Ä–µ–∂–∏–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    # –í –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–µ–∂–∏–º
    if data.get("ocr_mode"):
        log.info("OCR mode active, skipping upload handler")
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ–±—ã –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ø–∞–ª –≤ OCR –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    if not data.get("upload_mode"):
        log.info("Upload mode not active")
        await msg.answer(
            "‚ùå –í—ã –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏. –ù–∞–∂–º–∏—Ç–µ ¬´üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤¬ª –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º üôÇ",
            reply_markup=main_menu(),
        )
        return

    doc = msg.document
    if not doc or not hasattr(doc, "file_name") or doc.file_name is None:
        await msg.answer(
            "‚ùå –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞.", reply_markup=main_menu()
        )
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
    try:
        from app.utils.file_validation import validate_file, FileValidationError

        validate_file(doc.file_name, doc.file_size)
    except FileValidationError as e:
        await msg.answer(
            f"‚ùå <b>–§–∞–π–ª –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É:</b>\n\n{str(e)}\n\n" f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="HTML",
            reply_markup=main_menu(),
        )
        return
    except Exception as e:
        log.error("file_validation_error", filename=doc.file_name, error=str(e))
        await msg.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_menu(),
        )
        return

    file_path = None
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_info = await msg.bot.get_file(doc.file_id)

        with tempfile.NamedTemporaryFile(delete=False, suffix=f"_{doc.file_name if doc.file_name else ''}") as tmp:
            file_path = tmp.name
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è aiogram 3.x
            await msg.bot.download_file(file_info.file_path, file_path)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
        try:
            from app.services.yandex_disk_service import YandexDiskService

            yandex_service = YandexDiskService(settings.yandex_disk_token)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
            progress_msg = await msg.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å
            if USER_FILES_DIR.startswith("disk:"):
                base_path = USER_FILES_DIR[5:]  # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π disk:
            else:
                base_path = USER_FILES_DIR

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            file_path_components = determine_path(doc.file_name)
            remote_path = f"{base_path}/{file_path_components}/{doc.file_name}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω—É
            from app.utils.file_router import parse_filename

            filename_info = parse_filename(doc.file_name)
            is_unsorted = file_path_components.startswith("unsorted")

            log.info(
                "upload_path_components",
                user_files_dir=USER_FILES_DIR,
                base_path=base_path,
                file_path_components=file_path_components,
                filename=doc.file_name,
                remote_path=remote_path,
                is_unsorted=is_unsorted,
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
            file_exists = await yandex_service.file_exists(remote_path)
            if file_exists:
                await msg.answer(
                    f"‚ö†Ô∏è <b>–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!</b>\n\n"
                    f"–§–∞–π–ª <code>{doc.file_name}</code> —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.\n\n"
                    f"üìÅ –ü—É—Ç—å: <code>{remote_path}</code>\n\n"
                    f"–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –¥—Ä—É–≥–∏–º –∏–º–µ–Ω–µ–º, –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    parse_mode="HTML",
                    reply_markup=main_menu(),
                )
                return

            success = await yandex_service.upload_file(file_path, remote_path)

            if success:
                log.info("manual upload succeeded", filename=doc.file_name, path=file_path)

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                await progress_msg.delete()

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
                success_message = f"‚úÖ –§–∞–π–ª <b>{doc.file_name}</b> –Ω–∞–¥—ë–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ!\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–º–µ—â–µ–Ω –≤ unsorted
                if is_unsorted:
                    success_message += (
                        f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –§–∞–π–ª –ø–æ–º–µ—â–µ–Ω –≤ –ø–∞–ø–∫—É 'unsorted', —Ç–∞–∫ –∫–∞–∫ –∏–º—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É.\n\n"
                    )
                    success_message += (
                        "<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:</b> <code>–ü—Ä–∏–Ω—Ü–∏–ø–∞–ª_–ê–≥–µ–Ω—Ç_–≤–∏–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞_–Ω–æ–º–µ—Ä_–¥–∞—Ç–∞</code>\n"
                    )
                    success_message += (
                        "<b>–ü—Ä–∏–º–µ—Ä:</b> <code>–ê–ª—å—Ñ–∞—Ç—Ä–µ–∫—Å_–ê–≥—Ä–∏–∫–æ_–∞–≥–µ–Ω—Ç—Å–∫–∏–π –¥–æ–≥–æ–≤–æ—Ä_2_300525.docx</code>\n\n"
                    )

                success_message += f'<a href="{success}">üîó –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª</a>\n'
                success_message += "–•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë? üìé"

                await msg.answer(
                    success_message,
                    parse_mode="HTML",
                    reply_markup=main_menu(),
                )
            else:
                log.error("manual upload failed on service", filename=doc.file_name)
                await progress_msg.edit_text(
                    f"‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å <b>{doc.file_name}</b> –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üôè",
                    parse_mode="HTML",
                    reply_markup=main_menu(),
                )
        except Exception as e:
            log.error("manual upload exception", filename=doc.file_name, error=str(e))
            await progress_msg.edit_text(
                "‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML",
                reply_markup=main_menu(),
            )
    finally:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        from app.utils.cleanup import cleanup_temp_file_safe

        cleanup_temp_file_safe(file_path)
    # –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    await state.update_data(upload_mode=False)
