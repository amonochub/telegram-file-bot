"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è PDF (OCR)
"""

import structlog
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from app.constants.messages import OCR_MENU_TEXT, OCR_INSTRUCTIONS, LOG_OCR_MENU_TRIGGERED

router = Router()
log = structlog.get_logger()


@router.message(F.text == OCR_MENU_TEXT)
async def ocr_menu(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üßæ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å PDF"

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
    """
    log.info(LOG_OCR_MENU_TRIGGERED, text=message.text, user_id=message.from_user.id)
    await state.clear()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º OCR
    await state.update_data(ocr_mode=True)

    await message.answer(
        OCR_INSTRUCTIONS + "\n\n"
        "üí° <b>–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ OCR:</b>\n"
        "‚Ä¢ –ò–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ PDF\n"
        "‚Ä¢ –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π PDF —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–∏—Å–∫–∞\n"
        "‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–∞\n\n"
        "üìã <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:</b> –†—É—Å—Å–∫–∏–π, –ê–Ω–≥–ª–∏–π—Å–∫–∏–π\n"
        "‚è±Ô∏è <b>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> 10-30 —Å–µ–∫—É–Ω–¥\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏! üìÑ",
        parse_mode="HTML",
    )


@router.message(F.document)
async def handle_ocr_document(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è OCR

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
    """
    log.info("ocr_document_handler_called", user_id=message.from_user.id, filename=message.document.file_name)

    data = await state.get_data()
    log.info("ocr_state_data", data=data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ —Ä–µ–∂–∏–º–µ OCR
    if not data.get("ocr_mode"):
        log.info("ocr_mode_not_active")
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ OCR

    log.info("ocr_mode_active, processing document")

    doc = message.document

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ PDF
    if not doc.file_name.lower().endswith(".pdf"):
        from app.keyboards.menu import main_menu

        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!</b>\n\n"
            "–î–ª—è OCR –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ <b>PDF —Ñ–æ—Ä–º–∞—Ç</b>.\n\n"
            "üìã <b>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>\n"
            "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –≤ PDF –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è! üìÑ",
            parse_mode="HTML",
            reply_markup=main_menu(),
        )
        await state.update_data(ocr_mode=False)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é PDF –¥–æ–∫—É–º–µ–Ω—Ç...")

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        file_info = await message.bot.get_file(doc.file_id)
        import tempfile
        import os
        from pathlib import Path

        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
            temp_path = Path(tmp.name)

        await message.bot.download_file(file_info.file_path, str(temp_path))

        # –í—ã–ø–æ–ª–Ω—è–µ–º OCR
        try:
            from app.services.ocr_service import perform_ocr

            pdf_path, full_text = await perform_ocr(temp_path)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º searchable-PDF
            from aiogram.types import FSInputFile

            await message.answer_document(
                FSInputFile(pdf_path),
                caption=f"‚úÖ OCR –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                f"üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {doc.file_name}\n"
                f"üîç PDF —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç",
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            preview = "\n".join(full_text.splitlines()[:10]) or "‚Äì —Ç–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω ‚Äì"
            await message.answer(f"üîç <b>Preview OCR-—Ç–µ–∫—Å—Ç–∞ (10 —Å—Ç—Ä–æ–∫)</b>\n<pre>{preview}</pre>", parse_mode="HTML")

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if pdf_path.exists():
                os.unlink(pdf_path)

        except Exception as e:
            log.error("ocr_processing_failed", error=str(e))
            await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {str(e)}")
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π PDF —Ñ–∞–π–ª
            if temp_path.exists():
                os.unlink(temp_path)

    except Exception as e:
        log.error("ocr_download_failed", error=str(e))
        await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º OCR
    await state.update_data(ocr_mode=False)
