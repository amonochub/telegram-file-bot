import structlog
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message
from app.keyboards.menu import main_menu
from aiogram.fsm.context import FSMContext

router = Router()
log = structlog.get_logger()


@router.message(F.text == "üìÇ –û–±–∑–æ—Ä –ø–∞–ø–æ–∫")
async def browse_menu(message: Message, state: FSMContext):
    print(f"[DEBUG] browse_menu triggered for text: '{message.text}'", flush=True)
    await state.clear()
    from .browse import files_command
    await files_command(message)


@router.message(F.text == "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
async def upload_menu(message: Message, state: FSMContext):
    print(f"[DEBUG] upload_menu triggered for text: '{message.text}'", flush=True)
    await state.clear()
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –∞—Ä—Ö–∏–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏. –ü–∞–ø–∫–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."
    )


@router.message(F.text == "ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ò")
async def ai_verification_menu(message: Message, state: FSMContext):
    print(f"[DEBUG] ai_verification_menu triggered for text: '{message.text}'", flush=True)
    await state.clear()
    from .ai_verification import ai_check_command
    await ai_check_command(message)


@router.message(F.text == "üßæ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å PDF")
async def ocr_menu(message: Message, state: FSMContext):
    print(f"[DEBUG] ocr_menu triggered for text: '{message.text}'", flush=True)
    await state.clear()
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-–¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (OCR). –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—è–≤–∏—Ç—Å—è –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π."
    )


# ----- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é -----


@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu_button(message: Message, state: FSMContext):
    print(f"[DEBUG] main_menu_button triggered for text: '{message.text}'", flush=True)
    await state.clear()
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ –Ω–∞–∂–∞—Ç–∏—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–∏."""
    from .start import cmd_start  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤
    await cmd_start(message, state)


@router.message(F.text == "üí∞ –†–∞—Å—á—ë—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞")
async def client_calc_menu(message: Message, state: FSMContext):
    print(f"[DEBUG] client_calc_menu triggered for text: '{message.text}'", flush=True)
    await state.clear()
    from .client_calc import calc_menu_start
    await calc_menu_start(message, state)


# ----- –ö—É—Ä—Å—ã –¶–ë -----


@router.message(F.text == "üìà –ö—É—Ä—Å—ã –¶–ë")
async def cbr_rates_menu(message: Message, state: FSMContext):
    print(f"[DEBUG] cbr_rates_menu triggered for text: '{message.text}'", flush=True)
    await state.clear()
    """–¢–æ–≥–≥–ª –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É—Ä—Å–∞—Ö –¶–ë."""
    from app.config import settings
    from app.services.cbr_notifier import CBRNotificationService
    service = CBRNotificationService(message.bot, settings.redis_url)
    await service.connect()
    user_id = message.from_user.id
    if user_id in service.subscribers:
        await service.unsubscribe_user(user_id)
        await message.answer(
            "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫—É—Ä—Å–∞—Ö –¶–ë.", reply_markup=main_menu()
        )
    else:
        await service.subscribe_user(user_id)
        await message.answer(
            "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫—É—Ä—Å–∞—Ö –¶–ë!", reply_markup=main_menu()
        )


@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_button(message: Message, state: FSMContext):
    print(f"[DEBUG] help_button triggered for text: '{message.text}'", flush=True)
    await state.clear()
    help_text = (
        "üÜò **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**\n\n"
        "üìÇ **–û–±–∑–æ—Ä –ø–∞–ø–æ–∫:** –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤\n"
        "üì§ **–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤:** –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞\n"
        "ü§ñ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ò:** –∑–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–≤–µ—Ä–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤, –ø–æ—Ä—É—á–µ–Ω–∏–π, –∞–∫—Ç–æ–≤\n"
        "üßæ **–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å PDF:** OCR –¥–ª—è PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        "üí∞ **–†–∞—Å—á—ë—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:** —Ä–∞—Å—á–µ—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞\n"
    )
    await message.answer(help_text, parse_mode="Markdown", reply_markup=main_menu())


@router.message()
async def debug_echo_menu(message: Message):
    print(f"[DEBUG] Unhandled message: {message.text}", flush=True)
    log.info(
        "[DEBUG MENU] –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        user_id=message.from_user.id,
        text=message.text,
    )
    await message.answer(
        f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {message.text}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/files - –º–æ–∏ —Ñ–∞–π–ª—ã\n"
        "/disk_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ",
        reply_markup=main_menu(),
    )
