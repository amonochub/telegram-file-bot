import os
import tempfile
from typing import Any, Dict, Optional

import structlog
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.keyboards.menu import main_menu

# ----- –ó–∞–≥–ª—É—à–∫–∞ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –ò–ò –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫ Ruff (F821) -----
# –í –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é


# --- –ó–∞–≥–ª—É—à–∫–∞ –ò–ò-—Å–µ—Ä–≤–∏—Å–∞ (–ø–æ–∫–∞ –≤–º–µ—Å—Ç–æ Gemini/–∏–Ω—ã—Ö) ---
class _DummyAIService:  # pylint: disable=too-few-public-methods
    async def analyze_document_with_ai(self, text: str, doc_type: str):  # noqa: D401
        """–ó–∞–≥–ª—É—à–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        return {}

    async def verify_document_consistency(self, contract_data, assignment_data, report_data) -> dict:
        """–ó–∞–≥–ª—É—à–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏."""
        return {
            "status": "success",
            "checks": [],
            "errors": [],
            "warnings": [],
        }


# –≠–∫–∑–µ–º–ø–ª—è—Ä-–∑–∞–≥–ª—É—à–∫–∞, —á—Ç–æ–±—ã –∫–æ–¥ –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
ai_service = _DummyAIService()

router = Router()
logger = structlog.get_logger()

# user_id -> mapping of document types to data
user_documents: Dict[int, Dict[str, Any]] = {}


@router.message(Command("ai_check"))
async def ai_check_command(message: Message):
    builder = InlineKeyboardBuilder()
    builder.button(text="üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä", callback_data="upload_contract")
    builder.button(text="üìã –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Ä—É—á–µ–Ω–∏–µ", callback_data="upload_assignment")
    builder.button(text="üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç-–æ—Ç—á–µ—Ç", callback_data="upload_report")
    builder.button(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="verify_documents")
    builder.adjust(1)
    await message.answer(
        "ü§ñ **–ò–ò-–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**\n\n"
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:\n\n"
        "1. –ê–≥–µ–Ω—Ç—Å–∫–∏–π –¥–æ–≥–æ–≤–æ—Ä\n"
        "2. –ü–æ—Ä—É—á–µ–Ω–∏–µ\n"
        "3. –ê–∫—Ç-–æ—Ç—á–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n\n"
        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ'",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown",
    )


@router.callback_query(F.data.startswith("upload_"))
async def handle_document_upload(callback: CallbackQuery):
    doc_type = callback.data.split("_")[1]
    doc_names = {
        "contract": "–∞–≥–µ–Ω—Ç—Å–∫–∏–π –¥–æ–≥–æ–≤–æ—Ä",
        "assignment": "–ø–æ—Ä—É—á–µ–Ω–∏–µ",
        "report": "–∞–∫—Ç-–æ—Ç—á–µ—Ç",
    }
    user_id = callback.from_user.id
    if user_id not in user_documents:
        user_documents[user_id] = {}
    user_documents[user_id]["waiting_for"] = doc_type
    await callback.message.edit_text(
        f"üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ {doc_names[doc_type]} –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx –∏–ª–∏ .pdf\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
    )
    await callback.answer()


@router.message(F.document)
async def handle_document_received(message: Message, state: Optional[FSMContext] = None):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    if state:
        data = await state.get_data()
        if data.get("upload_mode"):
            logger.info("Upload mode active, skipping AI verification handler")
            return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ–±—ã –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ø–∞–ª –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ —Ä–µ–∂–∏–º–µ –ò–ò-–ø—Ä–æ–≤–µ—Ä–∫–∏
    if user_id not in user_documents or "waiting_for" not in user_documents[user_id]:
        logger.info("User not in AI verification mode, skipping")
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ–±—ã –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ø–∞–ª –≤ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    doc_type = user_documents[user_id]["waiting_for"]
    try:
        processing_msg = await message.reply("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò...")
        file_info = await message.bot.get_file(message.document.file_id)
        with tempfile.NamedTemporaryFile(delete=False, suffix=f"_{message.document.file_name}") as temp_file:
            temp_path = temp_file.name
        await message.bot.download_file(file_info.file_path, temp_path)
        # auth_success = await google_ai_service.authenticate_google() # Removed Google Drive authentication
        # if not auth_success: # Removed Google Drive authentication
        #     await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Drive") # Removed Google Drive authentication
        #     return # Removed Google Drive authentication
        # file_id = await google_ai_service.upload_document( # Removed Google Drive authentication
        #     temp_path, message.document.file_name # Removed Google Drive authentication
        # ) # Removed Google Drive authentication
        # if not file_id: # Removed Google Drive authentication
        #     await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Google Drive") # Removed Google Drive authentication
        #     return # Removed Google Drive authentication
        text = "–¢–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω."  # Placeholder for text extraction
        if text.strip():
            analysis_result = await ai_service.analyze_document_with_ai(  # Placeholder for AI analysis
                text,
                doc_type,  # Placeholder for AI analysis
            )  # Placeholder for AI analysis
            if "error" in analysis_result:  # Placeholder for AI analysis
                await processing_msg.edit_text(  # Placeholder for AI analysis
                    f"‚ùå –û—à–∏–±–∫–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞: {analysis_result['error']}"  # Placeholder for AI analysis
                )  # Placeholder for AI analysis
                return  # Placeholder for AI analysis
            user_documents[user_id][doc_type] = {  # Placeholder for AI analysis
                "file_name": message.document.file_name,  # Placeholder for AI analysis
                "analysis": analysis_result,  # Placeholder for AI analysis
                "text": text[:1000] + "..." if len(text) > 1000 else text,  # Placeholder for AI analysis
            }  # Placeholder for AI analysis
            del user_documents[user_id]["waiting_for"]  # Placeholder for AI analysis
            doc_names = {  # Placeholder for AI analysis
                "contract": "–ê–≥–µ–Ω—Ç—Å–∫–∏–π –¥–æ–≥–æ–≤–æ—Ä",  # Placeholder for AI analysis
                "assignment": "–ü–æ—Ä—É—á–µ–Ω–∏–µ",  # Placeholder for AI analysis
                "report": "–ê–∫—Ç-–æ—Ç—á–µ—Ç",  # Placeholder for AI analysis
            }  # Placeholder for AI analysis
            result_text = f"‚úÖ **{doc_names[doc_type]} –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**\n\n"  # Placeholder for AI analysis
            if doc_type == "contract":  # Placeholder for AI analysis
                result_text += (  # Placeholder for AI analysis
                    f"üìã **–î–æ–≥–æ–≤–æ—Ä:** {analysis_result.get('contract_number', '–Ω/–¥')}\n"  # Placeholder for AI analysis
                    f"üìÖ **–î–∞—Ç–∞:** {analysis_result.get('contract_date', '–Ω/–¥')}\n"  # Placeholder for AI analysis
                    f"üè¢ **–ü—Ä–∏–Ω—Ü–∏–ø–∞–ª:** {analysis_result.get('principal_name', '–Ω/–¥')}\n"  # Placeholder for AI analysis
                    f"üè¢ **–ê–≥–µ–Ω—Ç:** {analysis_result.get('agent_name', '–Ω/–¥')}\n"  # Placeholder for AI analysis
                    f"üí∞ **–í–∞–ª—é—Ç—ã:** {', '.join(analysis_result.get('currencies', []))}\n"  # Placeholder for AI analysis
                )  # Placeholder for AI analysis
            elif doc_type == "assignment":  # Placeholder for AI analysis
                result_text += (  # Placeholder for AI analysis
                    f"üìã **–ü–æ—Ä—É—á–µ–Ω–∏–µ:** {analysis_result.get('assignment_number', '–Ω/–¥')}\n"  # Placeholder for AI analysis
                    f"üìÖ **–î–∞—Ç–∞:** {analysis_result.get('assignment_date', '–Ω/–¥')}\n"  # Placeholder for AI analysis
                    f"üè≠ **–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä:** {analysis_result.get('exporter_name', '–Ω/–¥')}\n"  # Placeholder for AI analysis
                    f"üßæ **–ò–Ω–≤–æ–π—Å:** {analysis_result.get('invoice_number', '–Ω/–¥')}\n"  # Placeholder for AI analysis
                    f"üíµ **–°—É–º–º–∞:** {analysis_result.get('exchange_amount', '–Ω/–¥')} {analysis_result.get('currency', '')}\n"  # Placeholder for AI analysis
                    f"üí∞ **–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:** {analysis_result.get('agent_fee', '–Ω/–¥')} ‚ÇΩ\n"  # Placeholder for AI analysis
                )  # Placeholder for AI analysis
            elif doc_type == "report":  # Placeholder for AI analysis
                result_text += (  # Placeholder for AI analysis
                    f"üìã **–ê–∫—Ç-–æ—Ç—á–µ—Ç:** {analysis_result.get('report_number', '–Ω/–¥')}\n"  # Placeholder for AI analysis
                    f"üìÖ **–î–∞—Ç–∞:** {analysis_result.get('report_date', '–Ω/–¥')}\n"  # Placeholder for AI analysis
                    f"üîó **–ü–æ—Ä—É—á–µ–Ω–∏–µ:** {analysis_result.get('assignment_number', '–Ω/–¥')}\n"  # Placeholder for AI analysis
                    f"üè≠ **–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä:** {analysis_result.get('exporter_name', '–Ω/–¥')}\n"  # Placeholder for AI analysis
                    f"üí∞ **–°—É–º–º–∞ —É—Å–ª—É–≥–∏:** {analysis_result.get('service_amount_rub', '–Ω/d')} ‚ÇΩ\n"  # Placeholder for AI analysis
                )  # Placeholder for AI analysis
            builder = InlineKeyboardBuilder()  # Placeholder for AI analysis
            builder.button(  # Placeholder for AI analysis
                text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ",
                callback_data="verify_documents",  # Placeholder for AI analysis
            )  # Placeholder for AI analysis
            builder.button(
                text="üìé –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="ai_check_menu"
            )  # Placeholder for AI analysis
            builder.adjust(1)  # Placeholder for AI analysis
            await processing_msg.edit_text(  # Placeholder for AI analysis
                result_text,
                reply_markup=builder.as_markup(),
                parse_mode="Markdown",  # Placeholder for AI analysis
            )  # Placeholder for AI analysis
            os.unlink(temp_path)  # Placeholder for AI analysis
    except Exception as e:  # Placeholder for AI analysis
        logger.error("Error processing document", error=str(e))  # Placeholder for AI analysis
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")  # Placeholder for AI analysis


@router.callback_query(F.data == "verify_documents")
async def verify_documents(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_documents:
        await callback.message.edit_text("‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        return
    docs = user_documents[user_id]
    try:
        await callback.message.edit_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        contract_data = docs.get("contract", {}).get("analysis", {})
        assignment_data = docs.get("assignment", {}).get("analysis", {})
        report_data = docs.get("report", {}).get("analysis", {})
        if not assignment_data and not contract_data:
            await callback.message.edit_text("‚ùå –ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –¥–æ–≥–æ–≤–æ—Ä –∏ –ø–æ—Ä—É—á–µ–Ω–∏–µ")
            return
        analysis_result = await ai_service.verify_document_consistency(  # Placeholder for AI verification
            contract_data,
            assignment_data,
            report_data,  # Placeholder for AI verification
        )  # Placeholder for AI verification
        status_icons = {"success": "‚úÖ", "warning": "‚ö†Ô∏è", "error": "‚ùå"}  # Placeholder for AI verification
        result_text = (  # Placeholder for AI verification
            f"{status_icons[analysis_result['status']]} **–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏**\n\n"  # Placeholder for AI verification
        )  # Placeholder for AI verification
        if analysis_result["checks"]:  # Placeholder for AI verification
            result_text += "üìã **–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:**\n"  # Placeholder for AI verification
            for check in analysis_result["checks"]:  # Placeholder for AI verification
                result_text += f"‚Ä¢ {check} ‚úì\n"  # Placeholder for AI verification
            result_text += "\n"  # Placeholder for AI verification
        if analysis_result["errors"]:  # Placeholder for AI verification
            result_text += "‚ùå **–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏:**\n"  # Placeholder for AI verification
            for error in analysis_result["errors"]:  # Placeholder for AI verification
                result_text += f"‚Ä¢ {error}\n"  # Placeholder for AI verification
            result_text += "\n"  # Placeholder for AI verification
        if analysis_result["warnings"]:  # Placeholder for AI verification
            result_text += "‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**\n"  # Placeholder for AI verification
            for warning in analysis_result["warnings"]:  # Placeholder for AI verification
                result_text += f"‚Ä¢ {warning}\n"  # Placeholder for AI verification
            result_text += "\n"  # Placeholder for AI verification
        if analysis_result["status"] == "success":  # Placeholder for AI verification
            result_text += "üéâ –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É!"  # Placeholder for AI verification
        builder = InlineKeyboardBuilder()  # Placeholder for AI verification
        builder.button(  # Placeholder for AI verification
            text="üìé –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
            callback_data="ai_check_menu",  # Placeholder for AI verification
        )  # Placeholder for AI verification
        builder.adjust(1)  # Placeholder for AI verification
        await callback.message.edit_text(  # Placeholder for AI verification
            result_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown",  # Placeholder for AI verification
        )  # Placeholder for AI verification
    except Exception as e:  # Placeholder for AI verification
        logger.error("Error verifying documents", error=str(e))  # Placeholder for AI verification
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")  # Placeholder for AI verification
    await callback.answer()


@router.callback_query(F.data == "ai_check_menu")
async def back_to_ai_menu(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä", callback_data="upload_contract")
    builder.button(text="üìã –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Ä—É—á–µ–Ω–∏–µ", callback_data="upload_assignment")
    builder.button(text="üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç-–æ—Ç—á–µ—Ç", callback_data="upload_report")
    builder.button(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="verify_documents")
    builder.adjust(1)
    await callback.message.edit_text(
        "ü§ñ **–ò–ò-–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**\n\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown",
    )
    await callback.answer()


@router.message(Command("cancel"))
async def cancel_document_upload(message: Message):
    user_id = message.from_user.id
    if user_id in user_documents and "waiting_for" in user_documents[user_id]:
        del user_documents[user_id]["waiting_for"]
        await message.reply("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã")
