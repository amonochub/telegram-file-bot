"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –¶–ë.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞
—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π –Ω–∞–¥—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.
"""

import re
import structlog
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from aiogram.filters import Command

from app.keyboards.menu import main_menu
from app.services.cbr_rate_service import get_cbr_service

log = structlog.get_logger(__name__)

router = Router()


class RateStates(StatesGroup):
    choosing_day = State()
    choosing_currency = State()


# ----- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã -----

day_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="rate_today")],
        [InlineKeyboardButton(text="üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="rate_tomorrow")],
    ]
)

currency_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∫üá∏ USD", callback_data="rate_USD"),
            InlineKeyboardButton(text="üá™üá∫ EUR", callback_data="rate_EUR"),
        ],
        [
            InlineKeyboardButton(text="üá®üá≥ CNY", callback_data="rate_CNY"),
            InlineKeyboardButton(text="üá¶üá™ AED", callback_data="rate_AED"),
        ],
        [
            InlineKeyboardButton(text="üáπüá∑ TRY", callback_data="rate_TRY"),
        ],
    ]
)


@router.message(F.text == "üí± –ö—É—Ä—Å—ã –¶–ë")
async def rates_menu_start(msg: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–∞–º–∏ –¶–ë"""
    await state.set_state(RateStates.choosing_day)
    await msg.answer(
        "üí± <b>–ö—É—Ä—Å—ã –¶–ë –†–§</b>\n\n"
        "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:</b>\n"
        "‚Ä¢ <b>–°–µ–≥–æ–¥–Ω—è</b> - –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ <b>–ó–∞–≤—Ç—Ä–∞</b> - –∫—É—Ä—Å –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)\n\n"
        "üîî <b>–ï—Å–ª–∏ –∫—É—Ä—Å –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —è –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è!</b>",
        parse_mode="HTML",
        reply_markup=day_kb,
    )


@router.callback_query(F.data.startswith("rate_"))
async def process_rate_request(cb: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –∏–ª–∏ –≤–∞–ª—é—Ç—ã"""
    data_parts = cb.data.split("_")

    if len(data_parts) == 2:
        # –í—ã–±–æ—Ä –¥–Ω—è
        day_type = data_parts[1]  # today –∏–ª–∏ tomorrow

        await state.update_data(day_type=day_type)
        await state.set_state(RateStates.choosing_currency)

        day_text = "–∑–∞–≤—Ç—Ä–∞" if day_type == "tomorrow" else "—Å–µ–≥–æ–¥–Ω—è"
        await cb.message.edit_text(
            f"üí± <b>–ö—É—Ä—Å –¶–ë –Ω–∞ {day_text}</b>\n\n" "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:</b>",
            parse_mode="HTML",
            reply_markup=currency_kb,
        )

    elif len(data_parts) == 2 and data_parts[1] in ["USD", "EUR", "CNY", "AED", "TRY"]:
        # –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
        currency = data_parts[1]
        state_data = await state.get_data()
        day_type = state_data.get("day_type", "today")

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –∫—É—Ä—Å–æ–≤ –¶–ë
        cbr_service = await get_cbr_service(cb.bot)

        if day_type == "tomorrow":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –∫—É—Ä—Å–∞
            result = await cbr_service.process_tomorrow_rate(cb.from_user.id, currency)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –∫—É—Ä—Å–∞
            result = await cbr_service.process_today_rate(cb.from_user.id, currency)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await cb.message.edit_text(
            result["message"],
            parse_mode="HTML",
            reply_markup=main_menu(),
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    await cb.answer()


@router.message(F.text.regexp(r"^(USD|EUR|CNY|AED|TRY)$"))
async def direct_currency_input(msg: Message, state: FSMContext):
    """–ü—Ä—è–º–æ–π –≤–≤–æ–¥ –≤–∞–ª—é—Ç—ã (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∫–æ–¥ –≤–∞–ª—é—Ç—ã)"""
    currency = msg.text.upper()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
    current_state = await state.get_state()
    if current_state != RateStates.choosing_currency.state:
        return

    state_data = await state.get_data()
    day_type = state_data.get("day_type", "today")

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –∫—É—Ä—Å–æ–≤ –¶–ë
    cbr_service = await get_cbr_service(msg.bot)

    if day_type == "tomorrow":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –∫—É—Ä—Å–∞
        result = await cbr_service.process_tomorrow_rate(msg.from_user.id, currency)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –∫—É—Ä—Å–∞
        result = await cbr_service.process_today_rate(msg.from_user.id, currency)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await msg.answer(
        result["message"],
        parse_mode="HTML",
        reply_markup=main_menu(),
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@router.message(F.text.regexp(r"^(–∫—É—Ä—Å|–∫—É—Ä—Å—ã|—Ü–±|cbr)$", flags=re.IGNORECASE))
async def quick_rate_request(msg: Message, state: FSMContext):
    """–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    await rates_menu_start(msg, state)


@router.message(Command("cbr_subscribe"))
async def cmd_cbr_subscribe(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cbr_subscribe - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫—É—Ä—Å—ã –¶–ë
    """
    try:
        user_id = message.from_user.id

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        cbr_service = await get_cbr_service(message.bot)
        result = await cbr_service.toggle_subscription(user_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(result["message"], parse_mode="HTML", reply_markup=main_menu())

        log.info("cbr_subscription_toggled", user_id=user_id, action=result["action"], subscribed=result["subscribed"])

    except Exception as e:
        log.error("cbr_subscribe_error", user_id=message.from_user.id, error=str(e))
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.</b>\n\n"
            "üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</b>",
            parse_mode="HTML",
            reply_markup=main_menu(),
        )


@router.callback_query(F.data == "cbr_subscribe")
async def cbr_subscribe_callback(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫—É—Ä—Å—ã –¶–ë
    """
    try:
        user_id = callback.from_user.id

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        cbr_service = await get_cbr_service(callback.bot)
        result = await cbr_service.toggle_subscription(user_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.edit_text(result["message"], parse_mode="HTML")

        log.info(
            "cbr_subscription_toggled_callback",
            user_id=user_id,
            action=result["action"],
            subscribed=result["subscribed"],
        )

    except Exception as e:
        log.error("cbr_subscribe_callback_error", user_id=callback.from_user.id, error=str(e))
        await callback.message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.</b>\n\n"
            "üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</b>",
            parse_mode="HTML",
        )
    finally:
        await callback.answer()


@router.message(Command("cbr_status"))
async def cmd_cbr_status(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cbr_status - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    """
    try:
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        cbr_service = await get_cbr_service(message.bot)
        is_subscribed = await cbr_service.is_subscriber(user_id)

        if is_subscribed:
            status_message = (
                "‚úÖ <b>–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É—Ä—Å–∞—Ö –¶–ë</b>\n\n"
                "üìÖ <b>–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∫—É—Ä—Å–æ–≤.</b>\n\n"
                "üîî <b>–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cbr_subscribe</b>"
            )
        else:
            status_message = (
                "‚ùå <b>–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É—Ä—Å–∞—Ö –¶–ë</b>\n\n"
                "üìÖ <b>–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cbr_subscribe</b>\n\n"
                "üîî <b>–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∫—É—Ä—Å–æ–≤.</b>"
            )

        await message.answer(status_message, parse_mode="HTML", reply_markup=main_menu())

        log.info("cbr_status_checked", user_id=user_id, is_subscribed=is_subscribed)

    except Exception as e:
        log.error("cbr_status_error", user_id=message.from_user.id, error=str(e))
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏.</b>\n\n"
            "üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</b>",
            parse_mode="HTML",
            reply_markup=main_menu(),
        )
