import asyncio
import datetime as dt
import decimal
import xml.etree.ElementTree as ET
from dataclasses import dataclass

import structlog
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from celery import Celery

log = structlog.get_logger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
from app.config import settings
from app.keyboards.menu import main_menu

router = Router()

celery_app = Celery("calc_tasks", broker=settings.redis_url, backend=settings.redis_url)

# (legacy constants retained for compatibility purposes)
CBR_URL = "https://www.cbr.ru/scripts/XML_daily.asp?date_req={for_date}"


# --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –¶–ë ---
from app.services.rates_cache import get_rate as cached_cbr_rate


async def fetch_cbr_rate(currency: str, for_date: dt.date) -> decimal.Decimal | None:  # noqa: D401
    """Legacy-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ ‚Äì —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∫—ç—à.

    TODO: —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.
    """
    return await cached_cbr_rate(for_date, currency, requested_tomorrow=False)


async def safe_fetch_rate(currency: str, date: dt.date, requested_tomorrow: bool = False) -> decimal.Decimal | None:
    import aiohttp

    try:
        rate = await cached_cbr_rate(date, currency, requested_tomorrow=requested_tomorrow)
        if rate is None:
            log.warning("cbr_rate_not_found", currency=currency, date=str(date))
        return rate
    except (aiohttp.ClientError, asyncio.TimeoutError) as e:
        log.error("cbr_fetch_failed", currency=currency, date=str(date), error=str(e))
        return None


def result_message(currency, rate, amount, commission_pct):
    rub_sum = (amount * rate).quantize(decimal.Decimal("0.01"))
    fee = (rub_sum * commission_pct / 100).quantize(decimal.Decimal("0.01"))
    total = (rub_sum + fee).quantize(decimal.Decimal("0.01"))
    return (
        f"–°—É–º–º–∞ –≤ –≤–∞–ª—é—Ç–µ: {amount} {currency}\n"
        f"–ö—É—Ä—Å –¶–ë: {rate} ‚ÇΩ –∑–∞ {currency}\n"
        f"–°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö: {rub_sum} ‚ÇΩ\n"
        f"–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞: {fee} ‚ÇΩ\n"
        f"üíµ –û–±—â–∞—è —Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö: {total} ‚ÇΩ"
    )


class CalcStates(StatesGroup):
    choosing_day = State()
    entering_amount = State()
    choosing_currency = State()
    entering_commission = State()
    waiting_tomorrow_rate = State()


@dataclass
class CalcData:
    for_tomorrow: bool = False
    currency: str | None = None
    amount: decimal.Decimal | None = None
    commission: decimal.Decimal | None = None


# –ª–æ–∫–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ `main_menu()`

# ----- –í—ã–±–æ—Ä –¥–Ω—è –æ–ø–ª–∞—Ç—ã -----

day_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="calc_today")],
        [InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="calc_tomorrow")],
    ]
)

# ----- –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã -----

currency_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üá™üá∫ EUR", callback_data="cur_EUR"),
            InlineKeyboardButton(text="üá∫üá∏ USD", callback_data="cur_USD"),
            InlineKeyboardButton(text="üá®üá≥ CNY", callback_data="cur_CNY"),
            InlineKeyboardButton(text="üá¶üá™ AED", callback_data="cur_AED"),
        ],
        [
            InlineKeyboardButton(text="üáπüá∑ TRY", callback_data="cur_TRY"),
        ]
    ]
)


@router.message(F.text == "üí∞ –†–∞—Å—á—ë—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞")
async def calc_menu_start(msg: Message, state: FSMContext):
    await state.set_state(CalcStates.choosing_day)
    await state.update_data(data=CalcData().__dict__)
    await msg.answer(
        "–ó–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø–ª–∞—Ç—É?\n\nüëà –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.",
        reply_markup=day_kb,
    )

# ----- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω—è -----


@router.callback_query(F.data.startswith("calc_"))
async def process_day(cb: CallbackQuery, state: FSMContext):
    pick = cb.data.split("_")[1]  # today / tomorrow
    data = (await state.get_data()) or {}
    data["for_tomorrow"] = pick == "tomorrow"
    await state.update_data(**data)
    await state.set_state(CalcStates.entering_amount)
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –≤–∞–ª—é—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä 1000)")
    await cb.answer()


@router.callback_query(F.data.startswith("cur_"))
async def process_currency(cb: CallbackQuery, state: FSMContext):
    currency = cb.data.split("_")[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã
    supported_currencies = {"USD", "EUR", "CNY", "AED", "TRY"}
    if currency not in supported_currencies:
        await cb.answer(
            f"–ö—É—Ä—Å {currency} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¶–ë –†–§ üôà\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É.",
            show_alert=True
        )
        return
    
    data = await state.get_data()
    data["currency"] = currency
    await state.update_data(**data)
    await state.set_state(CalcStates.entering_commission)
    await cb.message.edit_text(
        "–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä 3.5)"
    )
    await cb.answer()


@router.message(CalcStates.entering_amount)
async def input_amount(msg: Message, state: FSMContext):
    try:
        amount = decimal.Decimal(msg.text.replace(",", "."))
        assert amount > 0
    except Exception:
        return await msg.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ üòä")
    data = await state.get_data()
    data["amount"] = amount
    await state.update_data(**data)
    await state.set_state(CalcStates.choosing_currency)
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –ø–µ—Ä–µ–≤–æ–¥–∞", reply_markup=currency_kb)


@router.message(CalcStates.entering_commission)
async def input_commission(msg: Message, state: FSMContext):
    try:
        pct = decimal.Decimal(msg.text.replace(",", "."))
        assert pct >= 0
    except Exception:
        return await msg.reply("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ‚â• 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    data = await state.get_data()
    data["commission"] = pct
    await state.update_data(**data)

    if data.get("for_tomorrow"):
        tomorrow = dt.date.today() + dt.timedelta(days=1)
        log.info("calc_tomorrow_request", tomorrow=str(tomorrow), currency=data["currency"])
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –∫—É—Ä—Å
        rate = await safe_fetch_rate(data["currency"], tomorrow, requested_tomorrow=True)
        if rate:
            log.info("calc_tomorrow_rate_found", rate=str(rate), currency=data["currency"])
            await msg.answer(
                result_message(data["currency"], rate, data["amount"], pct),
                reply_markup=main_menu(),
            )
            return await state.clear()
        
        # –ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –∫—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        log.info("calc_tomorrow_rate_not_found", currency=data["currency"])
        await msg.answer(
            "–ö—É—Ä—Å –¶–ë –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –ø–æ–∫–∞ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω üôà\n"
            "–Ø –ø—Ä–∏—à–ª—é —Ä–∞—Å—á—ë—Ç —Å—Ä–∞–∑—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è!",
            reply_markup=main_menu(),
        )
        await state.set_state(CalcStates.waiting_tomorrow_rate)
        celery_app.send_task(
            "calc_tasks.wait_rate_and_notify",
            kwargs={
                "chat_id": msg.chat.id,
                "currency": data["currency"],
                "amount": str(data["amount"]),
                "commission": str(pct),
            },
        )
        return

    # –†–∞—Å—á–µ—Ç –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
    today = dt.date.today()
    rate = await safe_fetch_rate(data["currency"], today)
    if rate is None:
        # –ï—Å–ª–∏ –∫—É—Ä—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –≤—á–µ—Ä–∞—à–Ω–∏–π
        yesterday = today - dt.timedelta(days=1)
        rate = await safe_fetch_rate(data["currency"], yesterday)
        if rate is None:
            await msg.answer("–ö—É—Ä—Å –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return await state.clear()
        await msg.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—É—Ä—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å.")
    
    await msg.answer(
        result_message(data["currency"], rate, data["amount"], pct),
        reply_markup=main_menu(),
    )
    await state.clear()


# Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —à–∞–≥–∏
@router.message(F.text.regexp(r"^\d+[\d\s,.]*$"))
async def fallback_amount(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É –±–µ–∑ –≤—ã–±–æ—Ä–∞ –¥–Ω—è"""
    current = await state.get_state()
    if current is not None:  # –≤–Ω—É—Ç—Ä–∏ —Ü–µ–ø–æ—á–∫–∏ ‚Äì –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —á–∏—Å–ª–æ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
    await state.set_state(CalcStates.choosing_day)
    await state.update_data(data=CalcData().__dict__)
    await msg.answer(
        "–ó–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø–ª–∞—Ç—É?\n\nüëà –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.",
        reply_markup=day_kb,
    )


@celery_app.task(name="calc_tasks.wait_rate_and_notify", bind=True, max_retries=None)
def wait_rate_and_notify(
    self, chat_id: int, currency: str, amount: str, commission: str
):
    import asyncio

    loop = asyncio.get_event_loop()

    async def _run():
        amt = decimal.Decimal(amount)
        pct = decimal.Decimal(commission)
        tomorrow = dt.date.today() + dt.timedelta(days=1)
        from aiogram import Bot

        bot = Bot(token=settings.bot_token)
        while True:
            rate = await cached_cbr_rate(tomorrow, currency, cache_only=True, requested_tomorrow=True)
            if rate:
                await bot.send_message(
                    chat_id,
                    result_message(currency, rate, amt, pct),
                    reply_markup=main_menu(),
                )
                break
            await asyncio.sleep(300)

    return loop.run_until_complete(_run())
