import asyncio
import datetime as dt
import decimal
import xml.etree.ElementTree as ET
from dataclasses import dataclass

import structlog
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from celery import Celery

log = structlog.get_logger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
from app.config import settings
from app.keyboards.menu import main_menu

router = Router()

celery_app = Celery("calc_tasks", broker=settings.redis_url, backend=settings.redis_url)

# (legacy constants retained for compatibility purposes)
CBR_URL = "https://www.cbr.ru/scripts/XML_daily.asp?date_req={for_date}"


# --- –ù–æ–≤—ã–π –Ω–∞–¥—ë–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∫—É—Ä—Å–æ–≤ –¶–ë ---
from app.services.cbr_rate_service import get_cbr_service


# --- Legacy —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ---
from app.services.rates_cache import get_rate as cached_cbr_rate


async def fetch_cbr_rate(currency: str, for_date: dt.date) -> decimal.Decimal | None:  # noqa: D401
    """Legacy-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ ‚Äì —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∫—ç—à.

    TODO: —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.
    """
    return await cached_cbr_rate(for_date, currency, requested_tomorrow=False)


async def safe_fetch_rate(currency: str, date: dt.date, requested_tomorrow: bool = False) -> decimal.Decimal | None:
    """Legacy-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    try:
        rate = await cached_cbr_rate(date, currency, requested_tomorrow=requested_tomorrow)
        if rate is None:
            log.warning("cbr_rate_not_found", currency=currency, date=str(date))
        return rate
    except (aiohttp.ClientError, asyncio.TimeoutError) as e:
        log.error("cbr_fetch_failed", currency=currency, date=str(date), error=str(e))
        return None


def result_message(currency, rate, amount, commission_pct):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞—Å—á—ë—Ç–∞"""
    rub_sum = (amount * rate).quantize(decimal.Decimal("0.01"))
    commission_amount = (rub_sum * commission_pct / 100).quantize(decimal.Decimal("0.01"))
    total = rub_sum + commission_amount
    
    return (
        f"üí∞ <b>–†–∞—Å—á—ë—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
        f"üí± <b>–í–∞–ª—é—Ç–∞:</b> {currency}\n"
        f"üíµ <b>–°—É–º–º–∞:</b> {amount} {currency}\n"
        f"üìä <b>–ö—É—Ä—Å –¶–ë:</b> {rate:.4f} ‚ÇΩ\n"
        f"üí∏ <b>–°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö:</b> {rub_sum} ‚ÇΩ\n"
        f"üíº <b>–ö–æ–º–∏—Å—Å–∏—è ({commission_pct}%):</b> {commission_amount} ‚ÇΩ\n"
        f"üéØ <b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b> {total} ‚ÇΩ"
    )


class CalcStates(StatesGroup):
    choosing_day = State()
    entering_amount = State()
    choosing_currency = State()
    entering_commission = State()
    waiting_tomorrow_rate = State()


@dataclass
class CalcData:
    for_tomorrow: bool = False
    currency: str | None = None
    amount: decimal.Decimal | None = None
    commission: decimal.Decimal | None = None


# –ª–æ–∫–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ `main_menu()`

# ----- –í—ã–±–æ—Ä –¥–Ω—è –æ–ø–ª–∞—Ç—ã -----

day_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="calc_today")],
        [InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="calc_tomorrow")],
    ]
)

# ----- –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã -----

currency_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üá™üá∫ EUR", callback_data="cur_EUR"),
            InlineKeyboardButton(text="üá∫üá∏ USD", callback_data="cur_USD"),
            InlineKeyboardButton(text="üá®üá≥ CNY", callback_data="cur_CNY"),
            InlineKeyboardButton(text="üá¶üá™ AED", callback_data="cur_AED"),
        ],
        [
            InlineKeyboardButton(text="üáπüá∑ TRY", callback_data="cur_TRY"),
        ],
    ]
)


@router.message(F.text == "üí∞ –†–∞—Å—á—ë—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞")
async def calc_menu_start(msg: Message, state: FSMContext):
    await state.set_state(CalcStates.choosing_day)
    await msg.answer(
        "üí∞ <b>–†–∞—Å—á—ë—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
        "üìã <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å (—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞)\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç!\n\n"
        "üëà –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
        parse_mode="HTML",
        reply_markup=day_kb,
    )


# ----- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω—è -----


@router.callback_query(F.data.startswith("calc_"))
async def process_day(cb: CallbackQuery, state: FSMContext):
    pick = cb.data.split("_")[1]
    data = await state.get_data()
    data["for_tomorrow"] = pick == "tomorrow"
    await state.update_data(**data)
    await state.set_state(CalcStates.entering_amount)
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –≤–∞–ª—é—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000)")
    await cb.answer()


@router.callback_query(F.data.startswith("cur_"))
async def process_currency(cb: CallbackQuery, state: FSMContext):
    currency = cb.data.split("_")[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã
    supported_currencies = {"USD", "EUR", "CNY", "AED", "TRY"}
    if currency not in supported_currencies:
        await cb.answer(f"–ö—É—Ä—Å {currency} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¶–ë –†–§ üôà\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É.", show_alert=True)
        return

    data = await state.get_data()
    data["currency"] = currency
    await state.update_data(**data)
    await state.set_state(CalcStates.entering_commission)
    await cb.message.edit_text("–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä 3.5)")
    await cb.answer()


@router.message(CalcStates.entering_amount)
async def input_amount(msg: Message, state: FSMContext):
    try:
        amount = decimal.Decimal(msg.text.replace(",", "."))
        assert amount > 0
    except Exception:
        return await msg.reply(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞!</b>\n\n"
            "üìù <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ 1000\n"
            "‚Ä¢ 1500.50\n"
            "‚Ä¢ 2,500\n\n"
            "üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–∫—É –∏–ª–∏ –∑–∞–ø—è—Ç—É—é –¥–ª—è –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏\n"
            "‚Ä¢ –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è\n"
            "‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! üòä",
            parse_mode="HTML"
        )
    data = await state.get_data()
    data["amount"] = amount
    await state.update_data(**data)
    await state.set_state(CalcStates.choosing_currency)
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –ø–µ—Ä–µ–≤–æ–¥–∞", reply_markup=currency_kb)


@router.message(CalcStates.entering_commission)
async def input_commission(msg: Message, state: FSMContext):
    try:
        pct = decimal.Decimal(msg.text.replace(",", "."))
        assert pct >= 0
    except Exception:
        return await msg.reply(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏!</b>\n\n"
            "üìù <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ 3.5 (3.5%)\n"
            "‚Ä¢ 2 (2%)\n"
            "‚Ä¢ 0 (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏)\n\n"
            "üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
            "‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ‚â• 0\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–∫—É –¥–ª—è –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏\n"
            "‚Ä¢ –û–±—ã—á–Ω–æ –∫–æ–º–∏—Å—Å–∏—è 1-5%\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! üòä",
            parse_mode="HTML"
        )
    
    data = await state.get_data()
    data["commission"] = pct
    await state.update_data(**data)

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –∫—É—Ä—Å–æ–≤ –¶–ë
    cbr_service = await get_cbr_service(msg.bot)
    
    if data.get("for_tomorrow"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –∫—É—Ä—Å–∞ —Å –Ω–æ–≤–æ–π –Ω–∞–¥—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        result = await cbr_service.process_tomorrow_rate(msg.chat.id, data["currency"])
        
        await msg.answer(result["message"], parse_mode="HTML", reply_markup=main_menu())
        
        if result["success"]:
            # –ö—É—Ä—Å –Ω–∞–π–¥–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—á—ë—Ç
            await msg.answer(
                result_message(data["currency"], result["rate"], data["amount"], pct),
                reply_markup=main_menu(),
            )
        # –ï—Å–ª–∏ –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –≤ process_tomorrow_rate
        
        return await state.clear()
    
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –∫—É—Ä—Å–∞ —Å –Ω–æ–≤–æ–π –Ω–∞–¥—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        result = await cbr_service.process_today_rate(msg.chat.id, data["currency"])
        
        if result["success"]:
            # –ö—É—Ä—Å –Ω–∞–π–¥–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—á—ë—Ç
            await msg.answer(
                result_message(data["currency"], result["rate"], data["amount"], pct),
                reply_markup=main_menu(),
            )
        else:
            # –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await msg.answer(result["message"], parse_mode="HTML", reply_markup=main_menu())
        
        return await state.clear()


# Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —à–∞–≥–∏
@router.message(F.text.regexp(r"^\d+[\d\s,.]*$"))
async def fallback_amount(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É –±–µ–∑ –≤—ã–±–æ—Ä–∞ –¥–Ω—è"""
    current = await state.get_state()
    if current is not None:  # –≤–Ω—É—Ç—Ä–∏ —Ü–µ–ø–æ—á–∫–∏ ‚Äì –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —á–∏—Å–ª–æ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
    await state.set_state(CalcStates.choosing_day)
    await state.update_data(data=CalcData().__dict__)
    await msg.answer(
        "–ó–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø–ª–∞—Ç—É?\n\nüëà –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.",
        reply_markup=day_kb,
    )


# Legacy Celery task - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@celery_app.task(name="calc_tasks.wait_rate_and_notify", bind=True, max_retries=None)
def wait_rate_and_notify(self, chat_id: int, currency: str, amount: str, commission: str):
    """Legacy –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    import asyncio

    loop = asyncio.get_event_loop()

    async def _run():
        amt = decimal.Decimal(amount)
        pct = decimal.Decimal(commission)
        tomorrow = dt.date.today() + dt.timedelta(days=1)
        from aiogram import Bot

        bot = Bot(token=settings.bot_token)
        while True:
            rate = await cached_cbr_rate(tomorrow, currency, cache_only=True, requested_tomorrow=True)
            if rate:
                await bot.send_message(
                    chat_id,
                    result_message(currency, rate, amt, pct),
                    reply_markup=main_menu(),
                )
                break
            await asyncio.sleep(300)

    return loop.run_until_complete(_run())
