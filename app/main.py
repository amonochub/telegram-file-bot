import asyncio
import logging
import os

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from app.config import settings
from app.logging_setup import setup_logging
from app.routers import main_router

# === —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ ===
# –†–æ—É—Ç–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ app.routers.main_router


async def main():
    setup_logging(settings.log_level)
    logger = logging.getLogger(__name__)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram File Bot...")

    if not settings.bot_token:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É
    if settings.yandex_disk_token:
        try:
            from app.services.yandex_disk_service import YandexDiskService

            yandex_service = YandexDiskService(settings.yandex_disk_token)
            connected = await yandex_service.check_connection()
            if connected:
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É - —Ñ—É–Ω–∫—Ü–∏–∏ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e} - —Ñ—É–Ω–∫—Ü–∏–∏ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    else:
        logger.warning("‚ö†Ô∏è YANDEX_DISK_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Ñ—É–Ω–∫—Ü–∏–∏ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã")

    bot = Bot(
        token=settings.bot_token,
        # –£–±–∏—Ä–∞–µ–º parse_mode —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown
    )
    dp = Dispatcher()
    dp.include_router(main_router)

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    os.makedirs("temp", exist_ok=True)

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main())
