"""
–ù–∞–¥—ë–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–∞–º–∏ –¶–ë.

–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
1. –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤—á–µ—Ä–∞—à–Ω–∏–µ –∫—É—Ä—Å—ã –≤–º–µ—Å—Ç–æ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö
2. –¢–æ–ª—å–∫–æ —Ç–æ—á–Ω–∞—è –¥–∞—Ç–∞ - –Ω–∏–∫–∞–∫–∏—Ö fallback –Ω–∞ –ø—Ä–æ—à–ª—ã–µ –¥–∞—Ç—ã
3. –ß—ë—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞
4. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö –∫—É—Ä—Å–æ–≤
"""

import asyncio
import datetime as dt
from datetime import date, timedelta
from typing import Optional, Dict, Any
import decimal
import structlog

from app.services.rates_cache import get_rate as cached_cbr_rate
from app.services.cbr_notifier import CBRNotificationService
from app.config import settings

log = structlog.get_logger(__name__)


class CBRRateService:
    """–ù–∞–¥—ë–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–∞–º–∏ –¶–ë"""
    
    def __init__(self, bot=None, redis_url: str = None):
        self.bot = bot
        self.redis_url = redis_url or settings.redis_url
        self.notifier = CBRNotificationService(bot, self.redis_url) if bot else None
        self._subscription_tasks: Dict[str, asyncio.Task] = {}
    
    async def get_cbr_rate(self, requested_date: date, currency: str) -> Optional[decimal.Decimal]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¶–ë –∑–∞ –Ω—É–∂–Ω—É—é –¥–∞—Ç—É.
        –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å –Ω–∞ —Å–∞–π—Ç–µ/–≤ –∫—ç—à–µ!
        –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–∏ –º—ã –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –∫—É—Ä—Å
            tomorrow = date.today() + timedelta(days=1)
            requested_tomorrow = requested_date == tomorrow
            
            rate = await cached_cbr_rate(
                requested_date, 
                currency, 
                cache_only=False,
                requested_tomorrow=requested_tomorrow
            )
            
            if rate is not None:
                log.info(
                    "cbr_rate_found_exact", 
                    date=str(requested_date), 
                    currency=currency, 
                    rate=str(rate)
                )
                return rate
            
            log.info(
                "cbr_rate_not_found", 
                date=str(requested_date), 
                currency=currency
            )
            return None
            
        except Exception as e:
            log.error(
                "cbr_rate_service_error", 
                date=str(requested_date), 
                currency=currency, 
                error=str(e)
            )
            return None
    
    async def process_today_rate(self, user_id: int, currency: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É—Ä—Å–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        today = date.today()
        rate = await self.get_cbr_rate(today, currency)
        
        if rate is None:
            message = (
                "‚è≥ <b>–ö—É—Ä—Å –¶–ë –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.</b>\n\n"
                "üìÖ <b>–û–±—ã—á–Ω–æ –∫—É—Ä—Å –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ 11:30.</b>\n"
                "üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∫—É—Ä—Å –Ω–∞ –∑–∞–≤—Ç—Ä–∞.</b>"
            )
            return {
                "success": False,
                "rate": None,
                "message": message,
                "date": today,
                "currency": currency
            }
        
        message = (
            f"‚úÖ <b>–ö—É—Ä—Å –¶–ë –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today:%d.%m.%Y}):</b>\n"
            f"üí± <b>{currency}:</b> {rate:.4f} ‚ÇΩ"
        )
        
        return {
            "success": True,
            "rate": rate,
            "message": message,
            "date": today,
            "currency": currency
        }
    
    async def process_tomorrow_rate(self, user_id: int, currency: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É—Ä—Å–∞ –∑–∞ –∑–∞–≤—Ç—Ä–∞.
        –ï—Å–ª–∏ –∫—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
        """
        tomorrow = date.today() + timedelta(days=1)
        rate = await self.get_cbr_rate(tomorrow, currency)
        
        if rate is not None:
            message = (
                f"‚úÖ <b>–ö—É—Ä—Å –¶–ë –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow:%d.%m.%Y}):</b>\n"
                f"üí± <b>{currency}:</b> {rate:.4f} ‚ÇΩ"
            )
            
            return {
                "success": True,
                "rate": rate,
                "message": message,
                "date": tomorrow,
                "currency": currency
            }
        
        # –ö—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        subscription_key = f"{user_id}:{currency}:{tomorrow.isoformat()}"
        
        message = (
            "‚è≥ <b>–ö—É—Ä—Å –¶–ë –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –µ—â—ë –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.</b>\n\n"
            "üìÖ <b>–û–±—ã—á–Ω–æ –æ–Ω –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ 17:00.</b>\n"
            "üîî <b>–Ø –ø—Ä–∏—à–ª—é –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∫—É—Ä—Å –ø–æ—è–≤–∏—Ç—Å—è!</b>"
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if subscription_key not in self._subscription_tasks:
            task = asyncio.create_task(
                self._monitor_tomorrow_rate(user_id, currency, tomorrow, subscription_key)
            )
            self._subscription_tasks[subscription_key] = task
            
            log.info(
                "cbr_tomorrow_subscription_started",
                user_id=user_id,
                currency=currency,
                date=str(tomorrow)
            )
        
        return {
            "success": False,
            "rate": None,
            "message": message,
            "date": tomorrow,
            "currency": currency,
            "subscription_started": True
        }
    
    async def _monitor_tomorrow_rate(
        self, 
        user_id: int, 
        currency: str, 
        tomorrow: date, 
        subscription_key: str,
        max_hours: int = 15
    ):
        """
        –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –∫—É—Ä—Å–∞.
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ max_hours —á–∞—Å–æ–≤.
        """
        if not self.bot:
            log.error("cbr_monitor_no_bot", user_id=user_id)
            return
        
        max_checks = int((max_hours * 60) / 3)  # –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã
        
        for check_num in range(max_checks):
            try:
                rate = await self.get_cbr_rate(tomorrow, currency)
                
                if rate is not None:
                    # –ö—É—Ä—Å –ø–æ—è–≤–∏–ª—Å—è!
                    message = (
                        f"‚úÖ <b>–ö—É—Ä—Å –¶–ë –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow:%d.%m.%Y}) –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω:</b>\n"
                        f"üí± <b>{currency}:</b> {rate:.4f} ‚ÇΩ"
                    )
                    
                    await self.bot.send_message(user_id, message, parse_mode="HTML")
                    
                    log.info(
                        "cbr_tomorrow_rate_found",
                        user_id=user_id,
                        currency=currency,
                        date=str(tomorrow),
                        rate=str(rate),
                        checks_made=check_num + 1
                    )
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                    if subscription_key in self._subscription_tasks:
                        del self._subscription_tasks[subscription_key]
                    
                    return
                
                log.debug(
                    "cbr_monitor_check",
                    user_id=user_id,
                    currency=currency,
                    date=str(tomorrow),
                    check_num=check_num + 1,
                    max_checks=max_checks
                )
                
                # –ñ–¥—ë–º 3 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(180)
                
            except Exception as e:
                log.error(
                    "cbr_monitor_error",
                    user_id=user_id,
                    currency=currency,
                    date=str(tomorrow),
                    check_num=check_num + 1,
                    error=str(e)
                )
                await asyncio.sleep(180)
        
        # –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        timeout_message = (
            f"‚ö†Ô∏è <b>–ö—É—Ä—Å –¶–ë –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow:%d.%m.%Y}) –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –∑–∞ {max_hours} —á–∞—Å–æ–≤.</b>\n\n"
            "üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫—É—Ä—Å –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É —Å–∞–π—Ç—É –¶–ë.</b>"
        )
        
        try:
            await self.bot.send_message(user_id, timeout_message, parse_mode="HTML")
        except Exception as e:
            log.error("cbr_timeout_notification_failed", user_id=user_id, error=str(e))
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        if subscription_key in self._subscription_tasks:
            del self._subscription_tasks[subscription_key]
        
        log.info(
            "cbr_monitor_timeout",
            user_id=user_id,
            currency=currency,
            date=str(tomorrow),
            max_hours=max_hours
        )
    
    async def cancel_subscription(self, user_id: int, currency: str, date: date):
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—É—Ä—Å–µ"""
        subscription_key = f"{user_id}:{currency}:{date.isoformat()}"
        
        if subscription_key in self._subscription_tasks:
            task = self._subscription_tasks[subscription_key]
            task.cancel()
            del self._subscription_tasks[subscription_key]
            
            log.info(
                "cbr_subscription_cancelled",
                user_id=user_id,
                currency=currency,
                date=str(date)
            )
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
        for task in self._subscription_tasks.values():
            task.cancel()
        
        self._subscription_tasks.clear()
        log.info("cbr_service_cleanup_complete")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
_cbr_service: Optional[CBRRateService] = None


async def get_cbr_service(bot=None) -> CBRRateService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ –∫—É—Ä—Å–æ–≤ –¶–ë"""
    global _cbr_service
    
    if _cbr_service is None:
        _cbr_service = CBRRateService(bot)
    
    return _cbr_service


async def cleanup_cbr_service():
    """–û—á–∏—Å—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∫—É—Ä—Å–æ–≤ –¶–ë"""
    global _cbr_service
    
    if _cbr_service is not None:
        await _cbr_service.cleanup()
        _cbr_service = None 