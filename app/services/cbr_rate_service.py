"""
–ù–∞–¥—ë–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–∞–º–∏ –¶–ë.

–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
1. –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤—á–µ—Ä–∞—à–Ω–∏–µ –∫—É—Ä—Å—ã –≤–º–µ—Å—Ç–æ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö
2. –¢–æ–ª—å–∫–æ —Ç–æ—á–Ω–∞—è –¥–∞—Ç–∞ - –Ω–∏–∫–∞–∫–∏—Ö fallback –Ω–∞ –ø—Ä–æ—à–ª—ã–µ –¥–∞—Ç—ã
3. –ß—ë—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞
4. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö –∫—É—Ä—Å–æ–≤
5. –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫—É—Ä—Å–∞
"""

import asyncio
import datetime as dt
from datetime import date, timedelta
from typing import Optional, Dict, Any
import decimal
import structlog

from app.utils.types import BusinessDate, CurrencyCode

from app.services.rates_cache import (
    get_rate as cached_cbr_rate,
    has_rate,
    save_pending_calc,
    get_all_pending,
    remove_pending,
    add_subscriber,
    remove_subscriber,
    get_subscribers,
    is_subscriber,
    toggle_subscription,
)
from app.services.cbr_notifier import CBRNotificationService
from app.config import settings

log = structlog.get_logger(__name__)


class CBRRateService:
    """–ù–∞–¥—ë–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–∞–º–∏ –¶–ë"""

    def __init__(self, bot=None, redis_url: str = None):
        self.bot = bot
        self.redis_url = redis_url or settings.redis_url
        self.notifier = CBRNotificationService(bot, self.redis_url) if bot else None
        self._subscription_tasks: Dict[str, asyncio.Task] = {}

    async def get_cbr_rate(self, requested_date: date, currency: str) -> Optional[decimal.Decimal]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¶–ë –∑–∞ –Ω—É–∂–Ω—É—é –¥–∞—Ç—É.
        –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å –Ω–∞ —Å–∞–π—Ç–µ/–≤ –∫—ç—à–µ!
        –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–∏ –º—ã –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –∫—É—Ä—Å
            tomorrow = date.today() + timedelta(days=1)
            requested_tomorrow = requested_date == tomorrow

            rate = await cached_cbr_rate(
                requested_date, currency, cache_only=False, requested_tomorrow=requested_tomorrow
            )

            if rate is not None:
                log.info("cbr_rate_found_exact", date=str(requested_date), currency=currency, rate=str(rate))
                return rate

            log.info("cbr_rate_not_found", date=str(requested_date), currency=currency)
            return None

        except Exception as e:
            log.error("cbr_rate_service_error", date=str(requested_date), currency=currency, error=str(e))
            return None

    async def save_pending_calc(
        self, user_id: int, date: BusinessDate, currency: CurrencyCode, amount: decimal.Decimal, commission: decimal.Decimal
    ) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            date: –î–∞—Ç–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞
            currency: –í–∞–ª—é—Ç–∞
            amount: –°—É–º–º–∞
            commission: –ö–æ–º–∏—Å—Å–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö

        Returns:
            True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            result = await save_pending_calc(user_id, date, currency, amount, commission)
            if result:
                log.info(
                    "cbr_pending_calc_saved",
                    user_id=user_id,
                    date=str(date),
                    currency=currency,
                    amount=str(amount),
                    commission=str(commission),
                )
            return result
        except Exception as e:
            log.error("cbr_save_pending_calc_error", user_id=user_id, date=str(date), error=str(e))
            return False

    async def process_pending_calcs(self, rates: Dict[str, decimal.Decimal], target_date: date) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã.

        Args:
            rates: –°–ª–æ–≤–∞—Ä—å –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
            target_date: –î–∞—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ä–∞—Å—á—ë—Ç—ã
        """
        if not self.bot:
            log.error("cbr_process_pending_calcs_no_bot")
            return

        try:
            pending_calcs = await get_all_pending()

            for calc_data in pending_calcs:
                try:
                    calc_date = date.fromisoformat(calc_data["date"])

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å—á—ë—Ç—ã –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –¥–∞—Ç—ã
                    if calc_date != target_date:
                        continue

                    user_id = calc_data["user_id"]
                    currency = calc_data["currency"]
                    amount = decimal.Decimal(calc_data["amount"])
                    commission = decimal.Decimal(calc_data["commission"])

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—É—Ä—Å –¥–ª—è —ç—Ç–æ–π –≤–∞–ª—é—Ç—ã
                    if currency in rates:
                        rate = rates[currency]

                        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á—ë—Ç
                        result_message = self._format_calc_result(currency, amount, rate, commission)

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await self.send_message_safe(user_id, result_message, parse_mode="HTML")

                        # –£–¥–∞–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç
                        await remove_pending(user_id, target_date)

                        log.info(
                            "cbr_pending_calc_processed",
                            user_id=user_id,
                            date=str(target_date),
                            currency=currency,
                            rate=str(rate),
                        )
                    else:
                        # –ö—É—Ä—Å –¥–ª—è –≤–∞–ª—é—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω
                        error_message = (
                            f"‚ö†Ô∏è <b>–ö—É—Ä—Å {currency} –Ω–∞ {target_date:%d.%m.%Y} –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>\n\n"
                            "üîÑ <b>–†–∞—Å—á—ë—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å.</b>\n"
                            "üìÖ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å—á—ë—Ç –ø–æ–∑–∂–µ.</b>"
                        )

                        await self.send_message_safe(user_id, error_message, parse_mode="HTML")

                        # –£–¥–∞–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç
                        await remove_pending(user_id, target_date)

                        log.warning(
                            "cbr_pending_calc_currency_not_found",
                            user_id=user_id,
                            date=str(target_date),
                            currency=currency,
                        )

                except Exception as e:
                    log.error("cbr_process_pending_calc_error", calc_data=calc_data, error=str(e))

        except Exception as e:
            log.error("cbr_process_pending_calcs_error", error=str(e))

    def _format_calc_result(
        self, currency: str, amount: decimal.Decimal, rate: decimal.Decimal, commission: decimal.Decimal
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞.

        Args:
            currency: –í–∞–ª—é—Ç–∞
            amount: –°—É–º–º–∞
            rate: –ö—É—Ä—Å
            commission: –ö–æ–º–∏—Å—Å–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        """
        rub_sum = (amount * rate).quantize(decimal.Decimal("0.01"))
        commission_amount = (rub_sum * commission / 100).quantize(decimal.Decimal("0.01"))
        total = rub_sum + commission_amount

        return (
            f"üí∞ <b>–†–∞—Å—á—ë—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π)</b>\n\n"
            f"üí± <b>–í–∞–ª—é—Ç–∞:</b> {currency}\n"
            f"üíµ <b>–°—É–º–º–∞:</b> {amount} {currency}\n"
            f"üìä <b>–ö—É—Ä—Å –¶–ë:</b> {rate:.4f} ‚ÇΩ\n"
            f"üí∏ <b>–°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö:</b> {rub_sum} ‚ÇΩ\n"
            f"üíº <b>–ö–æ–º–∏—Å—Å–∏—è ({commission}%):</b> {commission_amount} ‚ÇΩ\n"
            f"üéØ <b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b> {total} ‚ÇΩ"
        )

    async def process_today_rate(self, user_id: int, currency: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É—Ä—Å–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        today = date.today()
        rate = await self.get_cbr_rate(today, currency)

        if rate is None:
            message = (
                "‚è≥ <b>–ö—É—Ä—Å –¶–ë –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.</b>\n\n"
                "üìÖ <b>–û–±—ã—á–Ω–æ –∫—É—Ä—Å –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ 11:30.</b>\n"
                "üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∫—É—Ä—Å –Ω–∞ –∑–∞–≤—Ç—Ä–∞.</b>"
            )
            return {"success": False, "rate": None, "message": message, "date": today, "currency": currency}

        message = f"‚úÖ <b>–ö—É—Ä—Å –¶–ë –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today:%d.%m.%Y}):</b>\n" f"üí± <b>{currency}:</b> {rate:.4f} ‚ÇΩ"

        return {"success": True, "rate": rate, "message": message, "date": today, "currency": currency}

    async def process_tomorrow_rate(self, user_id: int, currency: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É—Ä—Å–∞ –∑–∞ –∑–∞–≤—Ç—Ä–∞.
        –ï—Å–ª–∏ –∫—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
        """
        tomorrow = date.today() + timedelta(days=1)
        rate = await self.get_cbr_rate(tomorrow, currency)

        if rate is not None:
            message = f"‚úÖ <b>–ö—É—Ä—Å –¶–ë –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow:%d.%m.%Y}):</b>\n" f"üí± <b>{currency}:</b> {rate:.4f} ‚ÇΩ"

            return {"success": True, "rate": rate, "message": message, "date": tomorrow, "currency": currency}

        # –ö—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        subscription_key = f"{user_id}:{currency}:{tomorrow.isoformat()}"

        message = (
            "‚è≥ <b>–ö—É—Ä—Å –¶–ë –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –µ—â—ë –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.</b>\n\n"
            "üìÖ <b>–û–±—ã—á–Ω–æ –æ–Ω –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ 17:00.</b>\n"
            "üîî <b>–Ø –ø—Ä–∏—à–ª—é –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∫—É—Ä—Å –ø–æ—è–≤–∏—Ç—Å—è!</b>"
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if subscription_key not in self._subscription_tasks:
            task = asyncio.create_task(self._monitor_tomorrow_rate(user_id, currency, tomorrow, subscription_key))
            self._subscription_tasks[subscription_key] = task

            log.info("cbr_tomorrow_subscription_started", user_id=user_id, currency=currency, date=str(tomorrow))

        return {
            "success": False,
            "rate": None,
            "message": message,
            "date": tomorrow,
            "currency": currency,
            "subscription_started": True,
        }

    async def _monitor_tomorrow_rate(
        self, user_id: int, currency: str, tomorrow: date, subscription_key: str, max_hours: int = 15
    ):
        """
        –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –∫—É—Ä—Å–∞.
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ max_hours —á–∞—Å–æ–≤.
        """
        if not self.bot:
            log.error("cbr_monitor_no_bot", user_id=user_id)
            return

        max_checks = int((max_hours * 60) / 3)  # –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã

        for check_num in range(max_checks):
            try:
                rate = await self.get_cbr_rate(tomorrow, currency)

                if rate is not None:
                    # –ö—É—Ä—Å –ø–æ—è–≤–∏–ª—Å—è!
                    message = (
                        f"‚úÖ <b>–ö—É—Ä—Å –¶–ë –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow:%d.%m.%Y}) –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω:</b>\n"
                        f"üí± <b>{currency}:</b> {rate:.4f} ‚ÇΩ"
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–æ—Å–∏–ª –∫—É—Ä—Å
                    await self.send_message_safe(user_id, message, parse_mode="HTML")

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞
                    general_message = (
                        f"üö® <b>–ö–£–†–° –¶–ë –ù–ê –ó–ê–í–¢–†–ê –û–ü–£–ë–õ–ò–ö–û–í–ê–ù!</b>\n\n"
                        f"üìÖ <b>–î–∞—Ç–∞:</b> {tomorrow:%d.%m.%Y}\n"
                        f"üí± <b>{currency}:</b> {rate:.4f} ‚ÇΩ\n\n"
                        f"‚è∞ <b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {dt.datetime.now().strftime('%H:%M')}"
                    )

                    await self.notify_all_subscribers(general_message, parse_mode="HTML")

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
                    rates = {currency: rate}
                    await self.process_pending_calcs(rates, tomorrow)

                    log.info(
                        "cbr_tomorrow_rate_found",
                        user_id=user_id,
                        currency=currency,
                        date=str(tomorrow),
                        rate=str(rate),
                        checks_made=check_num + 1,
                    )

                    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                    if subscription_key in self._subscription_tasks:
                        del self._subscription_tasks[subscription_key]

                    return

                log.debug(
                    "cbr_monitor_check",
                    user_id=user_id,
                    currency=currency,
                    date=str(tomorrow),
                    check_num=check_num + 1,
                    max_checks=max_checks,
                )

                # –ñ–¥—ë–º 3 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(180)

            except Exception as e:
                log.error(
                    "cbr_monitor_error",
                    user_id=user_id,
                    currency=currency,
                    date=str(tomorrow),
                    check_num=check_num + 1,
                    error=str(e),
                )
                await asyncio.sleep(180)

        # –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        timeout_message = (
            f"‚ö†Ô∏è <b>–ö—É—Ä—Å –¶–ë –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow:%d.%m.%Y}) –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –∑–∞ {max_hours} —á–∞—Å–æ–≤.</b>\n\n"
            "üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫—É—Ä—Å –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É —Å–∞–π—Ç—É –¶–ë.</b>"
        )

        await self.send_message_safe(user_id, timeout_message, parse_mode="HTML")

        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        if subscription_key in self._subscription_tasks:
            del self._subscription_tasks[subscription_key]

        log.info("cbr_monitor_timeout", user_id=user_id, currency=currency, date=str(tomorrow), max_hours=max_hours)

    async def cancel_subscription(self, user_id: int, currency: str, date: date):
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—É—Ä—Å–µ"""
        subscription_key = f"{user_id}:{currency}:{date.isoformat()}"

        if subscription_key in self._subscription_tasks:
            task = self._subscription_tasks[subscription_key]
            task.cancel()
            del self._subscription_tasks[subscription_key]

            log.info("cbr_subscription_cancelled", user_id=user_id, currency=currency, date=str(date))

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
        for task in self._subscription_tasks.values():
            task.cancel()

        self._subscription_tasks.clear()
        log.info("cbr_service_cleanup_complete")

    async def add_subscriber(self, user_id: int) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            True –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            result = await add_subscriber(user_id)
            if result:
                log.info("cbr_service_subscriber_added", user_id=user_id)
            return result
        except Exception as e:
            log.error("cbr_service_add_subscriber_error", user_id=user_id, error=str(e))
            return False

    async def remove_subscriber(self, user_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            result = await remove_subscriber(user_id)
            if result:
                log.info("cbr_service_subscriber_removed", user_id=user_id)
            return result
        except Exception as e:
            log.error("cbr_service_remove_subscriber_error", user_id=user_id, error=str(e))
            return False

    async def is_subscriber(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
        """
        try:
            return await is_subscriber(user_id)
        except Exception as e:
            log.error("cbr_service_check_subscriber_error", user_id=user_id, error=str(e))
            return False

    async def toggle_subscription(self, user_id: int) -> Dict[str, Any]:
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            result = await toggle_subscription(user_id)
            log.info("cbr_service_toggle_subscription", user_id=user_id, action=result["action"])
            return result
        except Exception as e:
            log.error("cbr_service_toggle_subscription_error", user_id=user_id, error=str(e))
            return {
                "subscribed": False,
                "action": "error",
                "message": "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.</b>",
            }

    async def send_message_safe(self, user_id: int, message: str, **kwargs) -> bool:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è send_message

        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        if not self.bot:
            log.error("cbr_send_message_no_bot", user_id=user_id)
            return False

        try:
            await self.bot.send_message(user_id, message, **kwargs)
            return True
        except Exception as e:
            log.error("cbr_send_message_error", user_id=user_id, error=str(e))

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏–ª –µ–≥–æ
            if "bot was blocked" in str(e).lower() or "user not found" in str(e).lower():
                log.warning("cbr_user_blocked_or_deleted", user_id=user_id)
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                await self.remove_subscriber(user_id)

            return False

    async def notify_all_subscribers(self, message: str, **kwargs) -> Dict[str, int]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.

        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è send_message

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {"sent": int, "failed": int, "total": int}
        """
        try:
            subscribers = await get_subscribers()
            sent = 0
            failed = 0

            for user_id in subscribers:
                if await self.send_message_safe(user_id, message, **kwargs):
                    sent += 1
                else:
                    failed += 1

            result = {"sent": sent, "failed": failed, "total": len(subscribers)}

            log.info("cbr_notify_all_subscribers", **result)
            return result

        except Exception as e:
            log.error("cbr_notify_all_subscribers_error", error=str(e))
            return {"sent": 0, "failed": 0, "total": 0}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
_cbr_service: Optional[CBRRateService] = None


async def get_cbr_service(bot=None) -> CBRRateService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ –∫—É—Ä—Å–æ–≤ –¶–ë"""
    global _cbr_service

    if _cbr_service is None:
        _cbr_service = CBRRateService(bot)

    return _cbr_service


async def cleanup_cbr_service():
    """–û—á–∏—Å—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∫—É—Ä—Å–æ–≤ –¶–ë"""
    global _cbr_service

    if _cbr_service is not None:
        await _cbr_service.cleanup()
        _cbr_service = None
