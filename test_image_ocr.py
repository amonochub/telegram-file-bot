#!/usr/bin/env python3
"""–¢–µ—Å—Ç OCR —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""

import asyncio
from pathlib import Path
from app.services.ocr_service import perform_ocr
from PIL import Image, ImageDraw, ImageFont
import fitz


async def test_image_ocr():
    """–¢–µ—Å—Ç OCR —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ç—Ä–æ–≤—ã–π —Ç–µ–∫—Å—Ç"""
    
    test_image = Path("/tmp/test_image_ocr.png")
    test_pdf = Path("/tmp/test_image_ocr.pdf")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
        width, height = 800, 600
        image = Image.new('RGB', (width, height), color='white')
        draw = ImageDraw.Draw(image)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
            font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 24)
        except:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
            font = ImageFont.load_default()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        text_lines = [
            "–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è OCR",
            "Test document for OCR processing", 
            "–°—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–∞–º–∏: 12345",
            "Line with numbers: 67890"
        ]
        
        y_position = 100
        for line in text_lines:
            draw.text((50, y_position), line, fill='black', font=font)
            y_position += 50
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image.save(test_image)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PDF (–±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è!)
        doc = fitz.open()
        page = doc.new_page(width=595, height=842)
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –∫–∞—Ä—Ç–∏–Ω–∫—É (—Ä–∞—Å—Ç—Ä)
        page.insert_image(fitz.Rect(0, 0, 595, 842), filename=str(test_image))
        doc.save(test_pdf)
        doc.close()
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω PDF —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {test_pdf}")
        print(f"üìÑ –†–∞–∑–º–µ—Ä PDF: {test_pdf.stat().st_size} –±–∞–π—Ç")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º OCR
        print("\nüîç –ó–∞–ø—É—Å–∫ OCR –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏...")
        output_file, extracted_text = await perform_ocr(str(test_pdf))
        
        print(f"‚úÖ OCR –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìÅ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
        print(f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ({len(extracted_text)} —Å–∏–º–≤–æ–ª–æ–≤):")
        print("-" * 50)
        print(extracted_text)
        print("-" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        success_count = 0
        total_checks = 4
        
        if "–¢–µ—Å—Ç–æ–≤—ã–π" in extracted_text or "—Ç–µ—Å—Ç–æ–≤—ã–π" in extracted_text.lower():
            print("‚úÖ –†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!")
            success_count += 1
        else:
            print("‚ùå –†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
            
        if "Test" in extracted_text or "test" in extracted_text.lower():
            print("‚úÖ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!")
            success_count += 1
        else:
            print("‚ùå –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
            
        if "12345" in extracted_text:
            print("‚úÖ –ß–∏—Å–ª–∞ 12345 —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã!")
            success_count += 1
        else:
            print("‚ùå –ß–∏—Å–ª–∞ 12345 –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã")
            
        if "67890" in extracted_text:
            print("‚úÖ –ß–∏—Å–ª–∞ 67890 —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã!")
            success_count += 1
        else:
            print("‚ùå –ß–∏—Å–ª–∞ 67890 –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã")
            
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_checks} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        
        if success_count >= 2:
            print("üéâ OCR —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ!")
            return True
        else:
            print("‚ö†Ô∏è OCR —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∏–∑–∫–æ–µ")
            return True  # –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        for file in [test_image, test_pdf]:
            if file.exists():
                file.unlink()
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file}")


if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç OCR —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
    print("=" * 50)
    
    result = asyncio.run(test_image_ocr())
    
    if result:
        print("\nüéâ OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å OCR")
