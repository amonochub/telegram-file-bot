#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ—Å—Ç OCR —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
"""

import asyncio
import tempfile
from pathlib import Path
from PIL import Image, ImageDraw, ImageFont
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '/Users/amonoc/Library/Mobile Documents/com~apple~CloudDocs/VS_Code/telegram-file-bot')

async def create_financial_document():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"""
    
    img = Image.new('RGB', (800, 1000), color='white')
    draw = ImageDraw.Draw(img)
    
    # –ü–æ–ª—É—á–∞–µ–º —à—Ä–∏—Ñ—Ç
    try:
        font_title = ImageFont.load_default()
        font_text = ImageFont.load_default()
    except:
        font_title = ImageFont.load_default()
        font_text = ImageFont.load_default()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    draw.text((50, 50), "–í–ê–õ–Æ–¢–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò", fill='black', font=font_title)
    draw.text((50, 80), "CURRENCY OPERATIONS", fill='black', font=font_title)
    
    # –õ–∏–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    draw.line([(50, 120), (750, 120)], fill='black', width=2)
    
    # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    content = [
        "",
        "–î–∞—Ç–∞: 06.08.2025",
        "Date: 06.08.2025",
        "",
        "–ö–£–†–°–´ –í–ê–õ–Æ–¢ / EXCHANGE RATES:",
        "",
        "USD (–î–æ–ª–ª–∞—Ä –°–®–ê / US Dollar):",
        "  ‚Ä¢ –ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏: 79.85 ‚ÇΩ",
        "  ‚Ä¢ –ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏: 80.25 ‚ÇΩ",
        "  ‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¶–ë: 80.05 ‚ÇΩ",
        "",
        "EUR (–ï–≤—Ä–æ / Euro):",
        "  ‚Ä¢ –ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏: 92.10 ‚ÇΩ", 
        "  ‚Ä¢ –ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏: 92.90 ‚ÇΩ",
        "  ‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¶–ë: 92.51 ‚ÇΩ",
        "",
        "–û–ü–ï–†–ê–¶–ò–ò / OPERATIONS:",
        "",
        "1. –û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã",
        "   –°—É–º–º–∞: 1,000.00 USD",
        "   –ö –ø–æ–ª—É—á–µ–Ω–∏—é: 79,850.00 ‚ÇΩ",
        "",
        "2. Currency exchange",
        "   Amount: 500.00 EUR",
        "   To receive: 46,050.00 ‚ÇΩ",
        "",
        "–ò–¢–û–ì–û / TOTAL:",
        "–û–ø–µ—Ä–∞—Ü–∏–π: 2",
        "–û–±—â–∞—è —Å—É–º–º–∞: 125,900.00 ‚ÇΩ",
        "",
        "–ö–æ–º–∏—Å—Å–∏—è: 2.5%",
        "Commission: 2.5%",
        "",
        "–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        "Document generated automatically"
    ]
    
    y_pos = 150
    for line in content:
        if line.strip():
            if line.startswith("–ö–£–†–°–´ –í–ê–õ–Æ–¢") or line.startswith("–û–ü–ï–†–ê–¶–ò–ò") or line.startswith("–ò–¢–û–ì–û"):
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
                draw.text((50, y_pos), line, fill='black', font=font_title)
            elif line.startswith("  ‚Ä¢") or line.startswith("   "):
                # –û—Ç—Å—Ç—É–ø—ã –¥–ª—è –ø–æ–¥–ø—É–Ω–∫—Ç–æ–≤
                draw.text((70, y_pos), line.strip(), fill='black', font=font_text)
            else:
                draw.text((50, y_pos), line, fill='black', font=font_text)
        y_pos += 25
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PDF
    with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_pdf:
        pdf_path = Path(tmp_pdf.name)
        img.save(pdf_path, 'PDF')
    
    print(f"üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {pdf_path}")
    return pdf_path

async def test_financial_ocr():
    """–¢–µ—Å—Ç OCR –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
    print("üí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ\n")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        doc_path = await create_financial_document()
        
        from app.services.ocr_service import perform_ocr
        
        print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è OCR —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º OCR
        searchable_pdf, extracted_text = await perform_ocr(str(doc_path))
        
        print("‚úÖ OCR –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:")
        print("-" * 60)
        print(extracted_text)
        print("-" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        financial_keywords = [
            "–≤–∞–ª—é—Ç–Ω—ã–µ", "currency", "–æ–ø–µ—Ä–∞—Ü–∏–∏", "operations",
            "–∫—É—Ä—Å", "exchange", "–¥–æ–ª–ª–∞—Ä", "dollar", "–µ–≤—Ä–æ", "euro",
            "–ø–æ–∫—É–ø–∫–∏", "–ø—Ä–æ–¥–∞–∂–∏", "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π", "–∏—Ç–æ–≥–æ", "total",
            "–∫–æ–º–∏—Å—Å–∏—è", "commission", "—Å—É–º–º–∞", "amount"
        ]
        
        numbers_patterns = ["79.85", "80.25", "80.05", "92.10", "92.90", "92.51", "1,000", "500", "2.5"]
        
        found_keywords = [kw for kw in financial_keywords if kw.lower() in extracted_text.lower()]
        found_numbers = [num for num in numbers_patterns if num in extracted_text]
        
        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"   –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: {len(found_keywords)}/{len(financial_keywords)}")
        print(f"   –ß–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(found_numbers)}/{len(numbers_patterns)}")
        print(f"   –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: {', '.join(found_keywords[:10])}")
        print(f"   –ù–∞–π–¥–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞: {', '.join(found_numbers[:10])}")
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        keyword_score = len(found_keywords) / len(financial_keywords)
        number_score = len(found_numbers) / len(numbers_patterns)
        total_score = (keyword_score + number_score) / 2
        
        print(f"\nüéØ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ OCR: {total_score:.1%}")
        
        if total_score >= 0.7:
            print("‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è!")
        elif total_score >= 0.5:
            print("‚ö†Ô∏è –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        else:
            print("‚ùå –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        
        # –û—á–∏—Å—Ç–∫–∞
        doc_path.unlink()
        if searchable_pdf.exists():
            searchable_pdf.unlink()
            
        return total_score
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ OCR: {e}")
        import traceback
        traceback.print_exc()
        return 0.0

async def test_ocr_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ OCR"""
    print("\nüõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ OCR")
    
    from app.services.ocr_service import perform_ocr
    
    # –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ–∞–π–ª–æ–º
    try:
        await perform_ocr("/–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π/—Ñ–∞–π–ª.pdf")
        print("‚ùå –û—à–∏–±–∫–∞: –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞")
    except Exception as e:
        print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞: {type(e).__name__}")
    
    # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º —Ñ–∞–π–ª–æ–º
    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp:
            empty_path = tmp.name
        
        await perform_ocr(empty_path)
        print("‚ö†Ô∏è OCR –æ–±—Ä–∞–±–æ—Ç–∞–ª –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –±–µ–∑ –æ—à–∏–±–∫–∏")
        os.unlink(empty_path)
    except Exception as e:
        print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞: {type(e).__name__}")
        os.unlink(empty_path)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üßæ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    # –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç
    score = await test_financial_ocr()
    
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    await test_ocr_error_handling()
    
    print("\n" + "=" * 50)
    if score >= 0.7:
        print("üéâ OCR —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
    elif score >= 0.5:
        print("‚úÖ OCR —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ")
    else:
        print("‚ö†Ô∏è OCR —Å–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π")

if __name__ == "__main__":
    asyncio.run(main())
