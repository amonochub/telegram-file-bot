#!/usr/bin/env python3
"""
–¢–µ—Å—Ç OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF
"""

import asyncio
import tempfile
from pathlib import Path
from PIL import Image, ImageDraw, ImageFont
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '/Users/amonoc/Library/Mobile Documents/com~apple~CloudDocs/VS_Code/telegram-file-bot')

async def create_test_pdf_with_text():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è OCR"""
    
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    img = Image.new('RGB', (800, 600), color='white')
    draw = ImageDraw.Draw(img)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
    try:
        # –ù–∞ macOS –ø–æ–ø—Ä–æ–±—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
        font_paths = [
            '/System/Library/Fonts/Arial.ttf',
            '/System/Library/Fonts/Helvetica.ttc',
            '/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf',
        ]
        
        font = None
        for font_path in font_paths:
            if os.path.exists(font_path):
                font = ImageFont.truetype(font_path, 40)
                break
        
        if font is None:
            font = ImageFont.load_default()
            print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    except:
        font = ImageFont.load_default()
        print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    text_lines = [
        "–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è OCR",
        "Test document for OCR",
        "",
        "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:",
        "1. –í–∞–ª—é—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
        "2. –ö—É—Ä—Å USD: 80.05 ‚ÇΩ",
        "3. –ö—É—Ä—Å EUR: 92.51 ‚ÇΩ",
        "",
        "Content:",
        "‚Ä¢ Currency exchange rates",
        "‚Ä¢ Document processing",
        "‚Ä¢ Text recognition test"
    ]
    
    y_position = 50
    for line in text_lines:
        if line.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            draw.text((50, y_position), line, fill='black', font=font)
        y_position += 45
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π PNG
    with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as tmp_img:
        img_path = Path(tmp_img.name)
        img.save(img_path, 'PNG')
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PNG –≤ PDF
    with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_pdf:
        pdf_path = Path(tmp_pdf.name)
        img.save(pdf_path, 'PDF')
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π PNG
    img_path.unlink()
    
    print(f"üìÑ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π PDF: {pdf_path}")
    return pdf_path

async def test_ocr_pipeline():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π pipeline OCR"""
    print("üßæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏\n")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF
        test_pdf = await create_test_pdf_with_text()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º OCR —Ñ—É–Ω–∫—Ü–∏–∏
        from app.services.ocr_service import perform_ocr
        
        print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º OCR
        searchable_pdf, extracted_text = await perform_ocr(str(test_pdf))
        
        print(f"‚úÖ OCR –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÇ Searchable PDF: {searchable_pdf}")
        print(f"üìÑ –†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ PDF: {test_pdf.stat().st_size} –±–∞–π—Ç")
        print(f"üìÑ –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ PDF: {searchable_pdf.stat().st_size} –±–∞–π—Ç")
        
        print("\nüìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
        print("-" * 50)
        print(extracted_text)
        print("-" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        keywords = ["–¢–µ—Å—Ç–æ–≤—ã–π", "Test", "USD", "EUR", "–≤–∞–ª—é—Ç–Ω—ã–µ", "Currency"]
        found_keywords = [kw for kw in keywords if kw.lower() in extracted_text.lower()]
        
        print(f"\nüéØ –ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:")
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(found_keywords)}/{len(keywords)}")
        print(f"   –ù–∞–π–¥–µ–Ω–Ω—ã–µ: {', '.join(found_keywords)}")
        
        if len(found_keywords) >= len(keywords) * 0.7:  # 70% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
            print("‚úÖ OCR —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ OCR –Ω–∏–∂–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ")
        
        # –û—á–∏—Å—Ç–∫–∞
        test_pdf.unlink()
        if searchable_pdf.exists():
            searchable_pdf.unlink()
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ OCR: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    asyncio.run(test_ocr_pipeline())
