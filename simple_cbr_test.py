#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¶–ë API –±–µ–∑ Redis
"""

import asyncio
import aiohttp
from datetime import date
import xml.etree.ElementTree as ET

CBR_URL = "https://www.cbr.ru/scripts/XML_daily.asp?date_req={for_date}"

ISO2CBR = {
    "USD": "R01235",
    "EUR": "R01239", 
    "CNY": "R01375",
    "AED": "R01230",
    "TRY": "R01700J",
}

async def get_cbr_rate(currency="USD"):
    """–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –∏–∑ –¶–ë"""
    try:
        today = date.today()
        date_req = today.strftime("%d/%m/%Y")
        url = CBR_URL.format(for_date=date_req)
        
        print(f"üîó –ó–∞–ø—Ä–æ—Å –∫ –¶–ë: {url}")
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as resp:
                if resp.status != 200:
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {resp.status}")
                    return None
                    
                xml_text = await resp.text()
                
        # –ü–∞—Ä—Å–∏–º XML
        tree = ET.fromstring(xml_text)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
        date_str = tree.get("Date", "")
        print(f"üìÖ –î–∞—Ç–∞ –∫—É—Ä—Å–∞: {date_str}")
        
        # –ò—â–µ–º –≤–∞–ª—é—Ç—É
        cbr_id = ISO2CBR.get(currency)
        if not cbr_id:
            print(f"‚ùå –í–∞–ª—é—Ç–∞ {currency} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            return None
            
        valute = tree.find(f".//Valute[@ID='{cbr_id}']")
        if valute is None:
            print(f"‚ùå –í–∞–ª—é—Ç–∞ {currency} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ –¶–ë")
            return None
            
        value_elem = valute.find("Value")
        nominal_elem = valute.find("Nominal")
        
        if value_elem is None or nominal_elem is None:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è {currency}")
            return None
            
        value = float(value_elem.text.replace(",", "."))
        nominal = int(nominal_elem.text)
        rate = value / nominal
        
        print(f"‚úÖ –ö—É—Ä—Å {currency}: {rate:.4f} ‚ÇΩ")
        return rate
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üè¶ –¢–µ—Å—Ç –∫—É—Ä—Å–æ–≤ –¶–ë –†–§\n")
    
    currencies = ["USD", "EUR", "CNY", "AED", "TRY"]
    
    for currency in currencies:
        rate = await get_cbr_rate(currency)
        if rate:
            print(f"üí± {currency}: {rate:.4f} ‚ÇΩ")
        else:
            print(f"‚ùå {currency}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å")
        print()

if __name__ == "__main__":
    asyncio.run(main())
