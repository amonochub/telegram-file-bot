#!/usr/bin/env python3
"""
–î–µ–º–æ-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram File Bot
–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —ç–º—É–ª—è—Ü–∏–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
"""

import asyncio
import logging
import os
from unittest.mock import Mock, AsyncMock

from app.config import settings
from app.logging_setup import setup_logging
from app.routers import main_router

# === —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ ===
import app.handlers.menu.main
import app.handlers.menu.upload
import app.handlers.menu.overview
import app.handlers.menu.ai_verification
import app.handlers.menu.ocr
import app.handlers.menu.client_calc
import app.handlers.menu.cbr_rates


async def demo_main():
    """–î–µ–º–æ-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    setup_logging(settings.log_level)
    logger = logging.getLogger(__name__)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram File Bot –≤ –î–ï–ú–û-—Ä–µ–∂–∏–º–µ...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    os.makedirs("temp", exist_ok=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ò–ò
    settings.validate_ai_config()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É
    if settings.yandex_disk_token:
        try:
            from app.services.yandex_disk_service import YandexDiskService
            yandex_service = YandexDiskService(settings.yandex_disk_token)
            connected = await yandex_service.check_connection()
            if connected:
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É - —Ñ—É–Ω–∫—Ü–∏–∏ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e} - —Ñ—É–Ω–∫—Ü–∏–∏ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    else:
        logger.warning("‚ö†Ô∏è YANDEX_DISK_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Ñ—É–Ω–∫—Ü–∏–∏ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
    mock_bot = Mock()
    mock_bot.token = "demo_token"
    mock_bot.session = AsyncMock()
    mock_bot.session.close = AsyncMock()
    
    mock_dispatcher = Mock()
    mock_dispatcher.include_router = Mock()
    mock_dispatcher.start_polling = AsyncMock()
    
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –î–ï–ú–û-—Ä–µ–∂–∏–º–µ")
    logger.info("üìù –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –∏ ALLOWED_USER_ID")
    logger.info("üí° –ü—Ä–∏–º–µ—Ä: export BOT_TOKEN='your_real_token' && export ALLOWED_USER_ID='your_id'")
    
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
        await asyncio.sleep(5)
        logger.info("üõë –î–µ–º–æ-—Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω")
    finally:
        await mock_bot.session.close()
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–º–æ-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ.setdefault("BOT_TOKEN", "demo_token")
    os.environ.setdefault("ALLOWED_USER_ID", "123456789")
    os.environ.setdefault("LOG_LEVEL", "INFO")
    os.environ.setdefault("REDIS_URL", "redis://localhost:6379")
    
    asyncio.run(demo_main()) 