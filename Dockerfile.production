# Multi-stage Dockerfile для оптимизации размера и безопасности

# Стадия 1: Builder для установки зависимостей
FROM python:3.11-slim as builder

# Установка системных зависимостей для сборки
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    pkg-config \
    libffi-dev \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Создание рабочей директории
WORKDIR /app

# Копирование файлов зависимостей
COPY requirements.txt .

# Установка Python зависимостей в пользовательскую директорию
RUN pip install --user --no-cache-dir --upgrade pip && \
    pip install --user --no-cache-dir -r requirements.txt

# Стадия 2: Runtime образ
FROM python:3.11-slim

# Метаданные образа
LABEL maintainer="telegram-file-bot" \
      version="1.0" \
      description="Telegram File Bot with OCR capabilities"

# Установка runtime системных зависимостей
RUN apt-get update && apt-get install -y \
    # OCR зависимости
    tesseract-ocr \
    tesseract-ocr-rus \
    tesseract-ocr-eng \
    # PDF обработка
    poppler-utils \
    ghostscript \
    # Утилиты для health checks
    curl \
    # Утилиты для отладки (опционально)
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Создание непривилегированного пользователя
RUN groupadd -r -g 1000 botuser && \
    useradd -r -u 1000 -g botuser -m -d /home/botuser -s /bin/bash botuser

# Создание рабочей директории с правильными правами
WORKDIR /app
RUN chown botuser:botuser /app

# Копирование Python зависимостей из builder стадии
COPY --from=builder --chown=botuser:botuser /root/.local /home/botuser/.local

# Копирование исходного кода
COPY --chown=botuser:botuser . .

# Создание необходимых директорий
RUN mkdir -p logs temp && \
    chown -R botuser:botuser logs temp && \
    chmod 755 logs temp

# Переключение на непривилегированного пользователя
USER botuser

# Настройка PATH для пользовательских установок Python
ENV PATH=/home/botuser/.local/bin:$PATH

# Переменные окружения
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python -c "import app.main; print('OK')" || exit 1

# Открытие порта для health check endpoint (если будет добавлен)
EXPOSE 8000

# Команда запуска
CMD ["python", "-m", "app.main"]
