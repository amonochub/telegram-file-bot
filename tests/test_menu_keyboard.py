from unittest.mock import Mock, patch
import pytest

# Mock the keyboard structure for testing
MOCK_KEYBOARD = [
    [Mock(text="üìÇ –û–±–∑–æ—Ä –ø–∞–ø–æ–∫")],
    [Mock(text="üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")],
    [Mock(text="üßæ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å PDF")],
    [Mock(text="üí∞ –†–∞—Å—á—ë—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞")],
    [Mock(text="üìà –ö—É—Ä—Å—ã –¶–ë")],
    [Mock(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
]

# Mock the MAIN_KB object
MOCK_MAIN_KB = Mock(keyboard=MOCK_KEYBOARD)

# Handler mapping for testing
BUTTONS_TO_HANDLERS = {
    "üìÇ –û–±–∑–æ—Ä –ø–∞–ø–æ–∫": "browse_menu",
    "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤": "upload_menu",
    "üßæ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å PDF": "ocr_menu",
    "üí∞ –†–∞—Å—á—ë—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞": "client_calc_menu",
    "üìà –ö—É—Ä—Å—ã –¶–ë": "cbr_rates_menu",
    "‚ÑπÔ∏è –ü–æ–º–æ—â—å": "help_button",
    "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": "main_menu_button",
}


def _flatten_texts():
    """Return a list of texts from all buttons in MOCK_KEYBOARD."""
    return [btn.text for row in MOCK_KEYBOARD for btn in row]


@patch("app.keyboards.menu.MAIN_KB", MOCK_MAIN_KB)
def test_all_buttons_present():
    """Ensure all necessary buttons are present in the keyboard."""
    texts = _flatten_texts()
    mandatory = [txt for txt in BUTTONS_TO_HANDLERS if txt != "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    for expected in mandatory:
        assert expected in texts, f"Button '{expected}' is missing from MAIN_KB"


def test_all_handlers_defined():
    """Ensure handlers exist for each button."""
    import importlib
    
    handler_modules = {
        "browse_menu": "app.handlers.menu.overview",
        "upload_menu": "app.handlers.menu.upload",
        "ocr_menu": "app.handlers.menu.ocr",
        "client_calc_menu": "app.handlers.menu.client_calc",
        "cbr_rates_menu": "app.handlers.menu.cbr_rates",
        "help_button": "app.handlers.menu.help",
        "main_menu_button": "app.handlers.menu.main",
    }
    
    for btn_text, handler_name in BUTTONS_TO_HANDLERS.items():
        if handler_name in handler_modules:
            try:
                module = importlib.import_module(handler_modules[handler_name])
                assert hasattr(module, handler_name), (
                    f"Handler '{handler_name}' not found in {handler_modules[handler_name]}"
                )
            except ImportError:
                pytest.fail(f"Module {handler_modules[handler_name]} not found for handler {handler_name}")