"""–¢–µ—Å—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π –∫–ª–∏–µ–Ω—Ç–∞."""

import pytest
from decimal import Decimal
from unittest.mock import AsyncMock, patch

from app.handlers.client_calc import result_message


class TestClientCalculation:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π."""

    def test_result_message_formatting(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞—Å—á–µ—Ç–∞."""
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        amount = Decimal("1000")
        currency = "USD"
        rate = Decimal("90.50")
        rub_sum = Decimal("90500")
        commission_pct = Decimal("2.5")
        fee = Decimal("2262.50")
        total = Decimal("92762.50")
        
        result = result_message(amount, currency, rate, rub_sum, commission_pct, fee, total)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        assert str(amount) in result
        assert currency in result
        assert str(rate) in result
        assert str(rub_sum) in result
        assert str(commission_pct) in result
        assert str(fee) in result
        assert str(total) in result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è
        assert "‚úÖ <b>–†–∞—Å—á—ë—Ç –≥–æ—Ç–æ–≤!</b>" in result
        assert "üìä <b>–î–µ—Ç–∞–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞:</b>" in result
        assert "üí∞ <b>–ö–æ–º–∏—Å—Å–∏—è –∞–≥–µ–Ω—Ç–∞:</b>" in result
        assert "üíµ <b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:" in result
        assert "üìã <b>–î–ª—è –∫–ª–∏–µ–Ω—Ç–∞:</b>" in result

    def test_result_message_with_different_currencies(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏."""
        test_cases = [
            ("EUR", "95.20", "95200", "1.5", "1428.00", "96628.00"),
            ("CNY", "12.50", "12500", "3.0", "375.00", "12875.00"),
            ("AED", "24.60", "24600", "2.0", "492.00", "25092.00"),
        ]
        
        for currency, rate, rub_sum, commission_pct, fee, total in test_cases:
            result = result_message(
                Decimal("1000"), 
                currency, 
                Decimal(rate), 
                Decimal(rub_sum), 
                Decimal(commission_pct), 
                Decimal(fee), 
                Decimal(total)
            )
            
            assert currency in result
            assert rate in result
            assert total in result

    def test_result_message_with_zero_commission(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –Ω—É–ª–µ–≤–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π."""
        result = result_message(
            Decimal("1000"),
            "USD",
            Decimal("90.00"),
            Decimal("90000"),
            Decimal("0"),
            Decimal("0"),
            Decimal("90000")
        )
        
        assert "0%" in result
        assert "0 ‚ÇΩ" in result

    def test_result_message_with_high_commission(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—ã—Å–æ–∫–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π."""
        result = result_message(
            Decimal("1000"),
            "USD",
            Decimal("90.00"),
            Decimal("90000"),
            Decimal("10.0"),
            Decimal("9000"),
            Decimal("99000")
        )
        
        assert "10.0%" in result
        assert "9000 ‚ÇΩ" in result

    @pytest.mark.asyncio
    async def test_calculation_with_mocked_rate(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å –∑–∞–º–æ–∫–∞–Ω–Ω—ã–º –∫—É—Ä—Å–æ–º."""
        with patch('app.handlers.client_calc.get_rate') as mock_get_rate:
            mock_get_rate.return_value = Decimal("90.50")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ä–∞—Å—á–µ—Ç–∞
            # –ù–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ —ç–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å FSM –ø—Ä–æ—Ü–µ—Å—Å
            pass

    def test_result_message_edge_cases(self):
        """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        # –û—á–µ–Ω—å –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞
        result = result_message(
            Decimal("1000000"),
            "USD",
            Decimal("100.00"),
            Decimal("100000000"),
            Decimal("5.0"),
            Decimal("5000000"),
            Decimal("105000000")
        )
        
        assert "1000000 USD" in result
        assert "100000000 ‚ÇΩ" in result
        
        # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ —á–∏—Å–ª–∞
        result = result_message(
            Decimal("0.01"),
            "USD",
            Decimal("90.00"),
            Decimal("0.90"),
            Decimal("1.0"),
            Decimal("0.01"),
            Decimal("0.91")
        )
        
        assert "0.01 USD" in result
        assert "0.90 ‚ÇΩ" in result

    def test_result_message_currency_symbols(self):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –≤–∞–ª—é—Ç."""
        currencies = ["USD", "EUR", "CNY", "AED", "TRY"]
        
        for currency in currencies:
            result = result_message(
                Decimal("1000"),
                currency,
                Decimal("90.00"),
                Decimal("90000"),
                Decimal("2.0"),
                Decimal("1800"),
                Decimal("91800")
            )
            
            assert f"1000 {currency}" in result
            assert "90.00 ‚ÇΩ" in result  # –ö—É—Ä—Å –≤—Å–µ–≥–¥–∞ –≤ —Ä—É–±–ª—è—Ö
            assert "90000 ‚ÇΩ" in result
            assert "1800 ‚ÇΩ" in result
            assert "91800 ‚ÇΩ" in result 