"""–¢–µ—Å—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤."""

import pytest
from datetime import date

from app.utils.filename_parser import parse_filename, determine_path


class TestFilenameParser:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π parse_filename –∏ determine_path."""

    def test_valid_filename_parsing(self):
        """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
        filename = "–ê–ª—å—Ñ–∞—Ç—Ä–µ–∫—Å_–ê–≥—Ä–∏–∫–æ_–∞–≥–µ–Ω—Ç—Å–∫–∏–π –¥–æ–≥–æ–≤–æ—Ä_2_300525.docx"
        
        result = parse_filename(filename)
        
        assert result is not None
        assert result["principal"] == "–ê–ª—å—Ñ–∞—Ç—Ä–µ–∫—Å"
        assert result["agent"] == "–ê–≥—Ä–∏–∫–æ"
        assert result["document_type"] == "–∞–≥–µ–Ω—Ç—Å–∫–∏–π –¥–æ–≥–æ–≤–æ—Ä"
        assert result["number"] == "2"
        assert result["date"] == "300525"

    def test_valid_filename_with_spaces(self):
        """–¢–µ—Å—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö."""
        filename = "–°–±–µ—Ä–±–∞–Ω–∫_–ò–ü –ò–≤–∞–Ω–æ–≤_–ø–æ—Ä—É—á–µ–Ω–∏–µ_15_280725.pdf"
        
        result = parse_filename(filename)
        
        assert result is not None
        assert result["principal"] == "–°–±–µ—Ä–±–∞–Ω–∫"
        assert result["agent"] == "–ò–ü –ò–≤–∞–Ω–æ–≤"
        assert result["document_type"] == "–ø–æ—Ä—É—á–µ–Ω–∏–µ"
        assert result["number"] == "15"
        assert result["date"] == "280725"

    def test_invalid_filename_format(self):
        """–¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
        filename = "–ø—Ä–æ—Å—Ç–æ_—Ñ–∞–π–ª.pdf"
        
        result = parse_filename(filename)
        
        assert result is None

    def test_filename_with_underscores_in_names(self):
        """–¢–µ—Å—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö."""
        filename = "–í–¢–ë_–û–û–û_–†–æ–≥–∞_–∏_–ö–æ–ø—ã—Ç–∞_–∞–∫—Ç-–æ—Ç—á–µ—Ç_7_150124.docx"
        
        result = parse_filename(filename)
        
        assert result is not None
        assert result["principal"] == "–í–¢–ë"
        assert result["agent"] == "–û–û–û_–†–æ–≥–∞_–∏_–ö–æ–ø—ã—Ç–∞"
        assert result["document_type"] == "–∞–∫—Ç-–æ—Ç—á–µ—Ç"
        assert result["number"] == "7"
        assert result["date"] == "150124"

    def test_filename_with_special_chars(self):
        """–¢–µ—Å—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏."""
        filename = "–ê–ª—å—Ñ–∞—Ç—Ä–µ–∫—Å@–ê–≥—Ä–∏–∫–æ_–¥–æ–≥–æ–≤–æ—Ä_2_300525.docx"
        
        result = parse_filename(filename)
        
        assert result is None

    def test_filename_with_dots_in_date(self):
        """–¢–µ—Å—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å —Ç–æ—á–∫–∞–º–∏ –≤ –¥–∞—Ç–µ."""
        filename = "–ê–ª—å—Ñ–∞—Ç—Ä–µ–∫—Å_–ê–≥—Ä–∏–∫–æ_–¥–æ–≥–æ–≤–æ—Ä_2_30.05.25.docx"
        
        result = parse_filename(filename)
        
        assert result is None

    def test_empty_filename(self):
        """–¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
        filename = ""
        
        result = parse_filename(filename)
        
        assert result is None

    def test_none_filename(self):
        """–¢–µ—Å—Ç None –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
        filename = None
        
        result = parse_filename(filename)
        
        assert result is None

    def test_filename_with_emoji(self):
        """–¢–µ—Å—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å —ç–º–æ–¥–∑–∏."""
        filename = "–ê–ª—å—Ñ–∞—Ç—Ä–µ–∫—ÅüöÄ_–ê–≥—Ä–∏–∫–æ_–¥–æ–≥–æ–≤–æ—Ä_2_300525.docx"
        
        result = parse_filename(filename)
        
        assert result is None

    def test_determine_path_valid_filename(self):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Ç–∏ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
        filename = "–ê–ª—å—Ñ–∞—Ç—Ä–µ–∫—Å_–ê–≥—Ä–∏–∫–æ_–∞–≥–µ–Ω—Ç—Å–∫–∏–π –¥–æ–≥–æ–≤–æ—Ä_2_300525.docx"
        
        result = determine_path(filename)
        
        assert result == "disk:/disk:/–ê–ª—å—Ñ–∞—Ç—Ä–µ–∫—Å/–ê–≥—Ä–∏–∫–æ/–∞–≥–µ–Ω—Ç—Å–∫–∏–π –¥–æ–≥–æ–≤–æ—Ä/–ê–ª—å—Ñ–∞—Ç—Ä–µ–∫—Å_–ê–≥—Ä–∏–∫–æ_–∞–≥–µ–Ω—Ç—Å–∫–∏–π –¥–æ–≥–æ–≤–æ—Ä_2_300525.docx"

    def test_determine_path_invalid_filename(self):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Ç–∏ –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
        filename = "–ø—Ä–æ—Å—Ç–æ_—Ñ–∞–π–ª.pdf"
        
        result = determine_path(filename)
        
        assert result == "disk:/disk:/unsorted/–ø—Ä–æ—Å—Ç–æ_—Ñ–∞–π–ª.pdf"

    def test_determine_path_with_spaces(self):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Ç–∏ –¥–ª—è –∏–º–µ–Ω–∏ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏."""
        filename = "–°–±–µ—Ä–±–∞–Ω–∫_–ò–ü –ò–≤–∞–Ω–æ–≤_–ø–æ—Ä—É—á–µ–Ω–∏–µ_15_280725.pdf"
        
        result = determine_path(filename)
        
        assert result == "disk:/disk:/–°–±–µ—Ä–±–∞–Ω–∫/–ò–ü –ò–≤–∞–Ω–æ–≤/–ø–æ—Ä—É—á–µ–Ω–∏–µ/–°–±–µ—Ä–±–∞–Ω–∫_–ò–ü –ò–≤–∞–Ω–æ–≤_–ø–æ—Ä—É—á–µ–Ω–∏–µ_15_280725.pdf"

    def test_determine_path_with_special_chars(self):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Ç–∏ –¥–ª—è –∏–º–µ–Ω–∏ —Å–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏."""
        filename = "–ê–ª—å—Ñ–∞—Ç—Ä–µ–∫—Å@–ê–≥—Ä–∏–∫–æ_–¥–æ–≥–æ–≤–æ—Ä_2_300525.docx"
        
        result = determine_path(filename)
        
        assert result == "disk:/disk:/unsorted/–ê–ª—å—Ñ–∞—Ç—Ä–µ–∫—Å@–ê–≥—Ä–∏–∫–æ_–¥–æ–≥–æ–≤–æ—Ä_2_300525.docx"

    def test_parse_filename_edge_cases(self):
        """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞."""
        test_cases = [
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è
            ("–ê_–ë_–í_1_010101.pdf", {
                "principal": "–ê",
                "agent": "–ë", 
                "document_type": "–í",
                "number": "1",
                "date": "010101"
            }),
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è
            ("–û—á–µ–Ω—å_–¥–ª–∏–Ω–Ω–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–∏–Ω—Ü–∏–ø–∞–ª–∞_–û—á–µ–Ω—å_–¥–ª–∏–Ω–Ω–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ_–∞–≥–µ–Ω—Ç–∞_–û—á–µ–Ω—å_–¥–ª–∏–Ω–Ω—ã–π_—Ç–∏–ø_–¥–æ–∫—É–º–µ–Ω—Ç–∞_999_311299.pdf", {
                "principal": "–û—á–µ–Ω—å_–¥–ª–∏–Ω–Ω–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–∏–Ω—Ü–∏–ø–∞–ª–∞",
                "agent": "–û—á–µ–Ω—å_–¥–ª–∏–Ω–Ω–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ_–∞–≥–µ–Ω—Ç–∞",
                "document_type": "–û—á–µ–Ω—å_–¥–ª–∏–Ω–Ω—ã–π_—Ç–∏–ø_–¥–æ–∫—É–º–µ–Ω—Ç–∞",
                "number": "999",
                "date": "311299"
            }),
        ]
        
        for filename, expected in test_cases:
            result = parse_filename(filename)
            assert result is not None
            for key, value in expected.items():
                assert result[key] == value

    def test_parse_filename_invalid_cases(self):
        """–¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞."""
        invalid_cases = [
            "—Ñ–∞–π–ª.pdf",  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π
            "–ê_–ë_–í_–ì_–î_–ï_–ñ_–ó.pdf",  # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —á–∞—Å—Ç–µ–π
            "–ê_–ë_–í_abc_010101.pdf",  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä
            "–ê_–ë_–í_1_abc.pdf",  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞
            "–ê_–ë_–í_1_010101",  # –ë–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        ]
        
        for filename in invalid_cases:
            result = parse_filename(filename)
            assert result is None, f"–§–∞–π–ª '{filename}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º" 