"""–¢–µ—Å—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤."""

import pytest
from pathlib import Path

from app.utils.file_validation import validate_file, FileValidationError


class TestFileValidation:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ validate_file."""

    def test_valid_pdf_file(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞."""
        filename = "test_document.pdf"
        file_size = 1024 * 1024  # 1MB
        
        result = validate_file(filename, file_size)
        assert result is True

    def test_valid_docx_file(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ DOCX —Ñ–∞–π–ª–∞."""
        filename = "test_document.docx"
        file_size = 2048 * 1024  # 2MB
        
        result = validate_file(filename, file_size)
        assert result is True

    def test_valid_image_file(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        filename = "test_image.jpg"
        file_size = 512 * 1024  # 512KB
        
        result = validate_file(filename, file_size)
        assert result is True

    def test_empty_filename(self):
        """–¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
        filename = ""
        file_size = 1024
        
        with pytest.raises(FileValidationError) as exc_info:
            validate_file(filename, file_size)
        
        assert "–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" in str(exc_info.value)

    def test_none_filename(self):
        """–¢–µ—Å—Ç None –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
        filename = None
        file_size = 1024
        
        with pytest.raises(FileValidationError) as exc_info:
            validate_file(filename, file_size)
        
        assert "–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" in str(exc_info.value)

    def test_unsupported_extension(self):
        """–¢–µ—Å—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è."""
        filename = "test_file.exe"
        file_size = 1024
        
        with pytest.raises(FileValidationError) as exc_info:
            validate_file(filename, file_size)
        
        assert "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞" in str(exc_info.value)

    def test_no_extension(self):
        """–¢–µ—Å—Ç —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è."""
        filename = "test_file"
        file_size = 1024
        
        with pytest.raises(FileValidationError) as exc_info:
            validate_file(filename, file_size)
        
        assert "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞" in str(exc_info.value)

    def test_file_too_large(self):
        """–¢–µ—Å—Ç —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."""
        filename = "test_document.pdf"
        file_size = 101 * 1024 * 1024  # 101MB
        
        with pytest.raises(FileValidationError) as exc_info:
            validate_file(filename, file_size)
        
        assert "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π" in str(exc_info.value)

    def test_filename_too_long(self):
        """–¢–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
        filename = "a" * 256 + ".pdf"  # 260 —Å–∏–º–≤–æ–ª–æ–≤
        file_size = 1024
        
        with pytest.raises(FileValidationError) as exc_info:
            validate_file(filename, file_size)
        
        assert "–ò–º—è —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ" in str(exc_info.value)

    def test_filename_with_special_chars(self):
        """–¢–µ—Å—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏."""
        filename = "test<file>.pdf"
        file_size = 1024
        
        with pytest.raises(FileValidationError) as exc_info:
            validate_file(filename, file_size)
        
        assert "–ò–º—è —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã" in str(exc_info.value)

    def test_filename_with_emoji(self):
        """–¢–µ—Å—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å —ç–º–æ–¥–∑–∏."""
        filename = "testüöÄfile.pdf"
        file_size = 1024
        
        with pytest.raises(FileValidationError) as exc_info:
            validate_file(filename, file_size)
        
        assert "–ò–º—è —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã" in str(exc_info.value)

    def test_case_insensitive_extensions(self):
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π."""
        test_cases = [
            ("test.PDF", 1024),
            ("test.DOCX", 1024),
            ("test.JPG", 1024),
            ("test.PNG", 1024),
        ]
        
        for filename, file_size in test_cases:
            result = validate_file(filename, file_size)
            assert result is True

    def test_zero_file_size(self):
        """–¢–µ—Å—Ç —Ñ–∞–π–ª–∞ –Ω—É–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."""
        filename = "test_document.pdf"
        file_size = 0
        
        with pytest.raises(FileValidationError) as exc_info:
            validate_file(filename, file_size)
        
        assert "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è" in str(exc_info.value)

    def test_negative_file_size(self):
        """–¢–µ—Å—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞."""
        filename = "test_document.pdf"
        file_size = -1024
        
        with pytest.raises(FileValidationError) as exc_info:
            validate_file(filename, file_size)
        
        assert "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è" in str(exc_info.value) 