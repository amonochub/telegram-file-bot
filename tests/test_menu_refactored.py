"""
–¢–µ—Å—Ç—ã –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–æ–π –º–æ–¥—É–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–Ω—é
"""

import pytest
from unittest.mock import AsyncMock, MagicMock
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from app.handlers.menu.overview import browse_menu
from app.handlers.menu.upload import upload_menu
from app.handlers.menu.help import help_button
from app.constants.messages import OVERVIEW_MENU_TEXT, UPLOAD_MENU_TEXT, UPLOAD_INSTRUCTIONS, HELP_MENU_TEXT, HELP_TEXT


@pytest.fixture
def mock_message():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫-—Å–æ–æ–±—â–µ–Ω–∏—è"""
    message = AsyncMock(spec=Message)
    message.from_user.id = 123456
    message.answer = AsyncMock()
    return message


@pytest.fixture
def mock_state():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫-—Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    state = AsyncMock(spec=FSMContext)
    state.clear = AsyncMock()
    return state


class TestOverviewMenu:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–±–∑–æ—Ä–∞ –ø–∞–ø–æ–∫"""

    @pytest.mark.asyncio
    async def test_browse_menu_clears_state(self, mock_message, mock_state):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –æ–±–∑–æ—Ä–∞ –ø–∞–ø–æ–∫"""
        mock_message.text = OVERVIEW_MENU_TEXT

        await browse_menu(mock_message, mock_state)

        mock_state.clear.assert_called_once()

    @pytest.mark.asyncio
    async def test_browse_menu_calls_files_command(self, mock_message, mock_state):
        """–¢–µ—Å—Ç –≤—ã–∑–æ–≤–∞ files_command –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –æ–±–∑–æ—Ä–∞ –ø–∞–ø–æ–∫"""
        mock_message.text = OVERVIEW_MENU_TEXT

        # –ú–æ–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç –∏ —Ñ—É–Ω–∫—Ü–∏—é
        with pytest.MonkeyPatch().context() as m:
            mock_files_command = AsyncMock()
            m.setattr("app.handlers.menu.overview.files_command", mock_files_command)

            await browse_menu(mock_message, mock_state)

            mock_files_command.assert_called_once_with(mock_message)


class TestUploadMenu:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""

    @pytest.mark.asyncio
    async def test_upload_menu_clears_state(self, mock_message, mock_state):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏"""
        mock_message.text = UPLOAD_MENU_TEXT

        await upload_menu(mock_message, mock_state)

        mock_state.clear.assert_called_once()

    @pytest.mark.asyncio
    async def test_upload_menu_sends_instructions(self, mock_message, mock_state):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏"""
        mock_message.text = UPLOAD_MENU_TEXT

        await upload_menu(mock_message, mock_state)

        mock_message.answer.assert_called_once_with(UPLOAD_INSTRUCTIONS)


class TestHelpMenu:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–º–æ—â–∏"""

    @pytest.mark.asyncio
    async def test_help_button_clears_state(self, mock_message, mock_state):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
        mock_message.text = HELP_MENU_TEXT

        await help_button(mock_message, mock_state)

        mock_state.clear.assert_called_once()

    @pytest.mark.asyncio
    async def test_help_button_sends_help_text(self, mock_message, mock_state):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ–º–æ—â–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
        mock_message.text = HELP_MENU_TEXT

        await help_button(mock_message, mock_state)

        mock_message.answer.assert_called_once()
        call_args = mock_message.answer.call_args
        assert call_args[0][0] == HELP_TEXT
        assert call_args[1]["parse_mode"] == "Markdown"


class TestConstants:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"""

    def test_overview_menu_text_constant(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –æ–±–∑–æ—Ä–∞ –ø–∞–ø–æ–∫"""
        assert OVERVIEW_MENU_TEXT == "üìÇ –û–±–∑–æ—Ä –ø–∞–ø–æ–∫"

    def test_upload_menu_text_constant(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏"""
        assert UPLOAD_MENU_TEXT == "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤"

    def test_help_menu_text_constant(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
        assert HELP_MENU_TEXT == "‚ÑπÔ∏è –ü–æ–º–æ—â—å"

    def test_upload_instructions_constant(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∑–∞–≥—Ä—É–∑–∫–∏"""
        assert "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –∞—Ä—Ö–∏–≤" in UPLOAD_INSTRUCTIONS

    def test_help_text_constant(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –ø–æ–º–æ—â–∏"""
        assert "–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É" in HELP_TEXT
