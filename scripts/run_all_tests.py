#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
"""

import asyncio
import subprocess
import sys
import logging
from pathlib import Path
from datetime import datetime
import json
import argparse

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))


class TestRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.results = {}
        self.start_time = datetime.now()
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler('logs/test_runner.log', encoding='utf-8')
            ]
        )
    
    async def run_manual_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Ä—É—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä—É—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
            from scripts.manual_test_runner import ManualTestRunner
            
            runner = ManualTestRunner()
            success = await runner.run_all_tests()
            
            self.results['manual_tests'] = {
                'success': success,
                'timestamp': datetime.now().isoformat()
            }
            
            return success
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä—É—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {e}")
            self.results['manual_tests'] = {
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
            return False
    
    def run_unit_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.logger.info("üß™ –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º pytest —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
            cmd = [
                sys.executable, "-m", "pytest",
                "tests/",
                "-v",
                "--tb=short",
                "--cov=app",
                "--cov-report=term-missing",
                "--cov-report=html:htmlcov",
                "--cov-report=xml",
                "--cov-fail-under=80",
                "-m", "not slow and not integration"
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            success = result.returncode == 0
            
            self.results['unit_tests'] = {
                'success': success,
                'return_code': result.returncode,
                'stdout': result.stdout,
                'stderr': result.stderr,
                'timestamp': datetime.now().isoformat()
            }
            
            if success:
                self.logger.info("‚úÖ –ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            else:
                self.logger.error("‚ùå –ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
                self.logger.error(f"STDOUT: {result.stdout}")
                self.logger.error(f"STDERR: {result.stderr}")
            
            return success
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {e}")
            self.results['unit_tests'] = {
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
            return False
    
    def run_integration_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.logger.info("üß™ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
        
        try:
            cmd = [
                sys.executable, "-m", "pytest",
                "tests/test_integration.py",
                "-v",
                "--tb=short",
                "-m", "integration"
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            success = result.returncode == 0
            
            self.results['integration_tests'] = {
                'success': success,
                'return_code': result.returncode,
                'stdout': result.stdout,
                'stderr': result.stderr,
                'timestamp': datetime.now().isoformat()
            }
            
            if success:
                self.logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            else:
                self.logger.error("‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
                self.logger.error(f"STDOUT: {result.stdout}")
                self.logger.error(f"STDERR: {result.stderr}")
            
            return success
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {e}")
            self.results['integration_tests'] = {
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
            return False
    
    def run_performance_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        try:
            cmd = [
                sys.executable, "-m", "pytest",
                "tests/test_performance.py",
                "-v",
                "--tb=short",
                "-m", "not slow"
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            success = result.returncode == 0
            
            self.results['performance_tests'] = {
                'success': success,
                'return_code': result.returncode,
                'stdout': result.stdout,
                'stderr': result.stderr,
                'timestamp': datetime.now().isoformat()
            }
            
            if success:
                self.logger.info("‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            else:
                self.logger.error("‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
                self.logger.error(f"STDOUT: {result.stdout}")
                self.logger.error(f"STDERR: {result.stderr}")
            
            return success
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            self.results['performance_tests'] = {
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
            return False
    
    def run_security_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        try:
            cmd = [
                sys.executable, "-m", "pytest",
                "tests/test_security.py",
                "-v",
                "--tb=short"
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            success = result.returncode == 0
            
            self.results['security_tests'] = {
                'success': success,
                'return_code': result.returncode,
                'stdout': result.stdout,
                'stderr': result.stderr,
                'timestamp': datetime.now().isoformat()
            }
            
            if success:
                self.logger.info("‚úÖ –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            else:
                self.logger.error("‚ùå –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
                self.logger.error(f"STDOUT: {result.stdout}")
                self.logger.error(f"STDERR: {result.stderr}")
            
            return success
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            self.results['security_tests'] = {
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
            return False
    
    def run_linting(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–µ—Ä–∞"""
        self.logger.info("üß™ –ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–µ—Ä–∞...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ flake8
            cmd = [sys.executable, "-m", "flake8", "app/", "tests/"]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            success = result.returncode == 0
            
            self.results['linting'] = {
                'success': success,
                'return_code': result.returncode,
                'stdout': result.stdout,
                'stderr': result.stderr,
                'timestamp': datetime.now().isoformat()
            }
            
            if success:
                self.logger.info("‚úÖ –õ–∏–Ω—Ç–∏–Ω–≥ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                self.logger.warning("‚ö†Ô∏è –õ–∏–Ω—Ç–∏–Ω–≥ –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä–æ–±–ª–µ–º—ã")
                self.logger.warning(f"STDOUT: {result.stdout}")
            
            return success
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ª–∏–Ω—Ç–µ—Ä–∞: {e}")
            self.results['linting'] = {
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
            return False
    
    def run_type_checking(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤"""
        self.logger.info("üß™ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤...")
        
        try:
            cmd = [sys.executable, "-m", "mypy", "app/"]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            success = result.returncode == 0
            
            self.results['type_checking'] = {
                'success': success,
                'return_code': result.returncode,
                'stdout': result.stdout,
                'stderr': result.stderr,
                'timestamp': datetime.now().isoformat()
            }
            
            if success:
                self.logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.logger.warning("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –ø—Ä–æ–±–ª–µ–º—ã")
                self.logger.warning(f"STDOUT: {result.stdout}")
            
            return success
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤: {e}")
            self.results['type_checking'] = {
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
            return False
    
    def generate_report(self) -> bool:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        end_time = datetime.now()
        duration = end_time - self.start_time
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_tests = len(self.results)
        passed_tests = sum(1 for result in self.results.values() if result.get('success', False))
        
        self.logger.info("\n" + "="*60)
        self.logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
        self.logger.info("="*60)
        
        for test_type, result in self.results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result.get('success', False) else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            self.logger.info(f"{status}: {test_type}")
        
        self.logger.info(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        self.logger.info(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {total_tests}")
        self.logger.info(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        self.logger.info(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
        self.logger.info(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_data = {
            "timestamp": end_time.isoformat(),
            "duration_seconds": duration.total_seconds(),
            "total_test_categories": total_tests,
            "passed_categories": passed_tests,
            "failed_categories": total_tests - passed_tests,
            "results": self.results
        }
        
        report_file = Path("logs/comprehensive_test_report.json")
        report_file.parent.mkdir(exist_ok=True)
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, ensure_ascii=False, indent=2)
        
        self.logger.info(f"\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
        
        success_rate = (passed_tests / total_tests) * 100 if total_tests > 0 else 0
        self.logger.info(f"\nüéØ –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
        
        if success_rate >= 80:
            self.logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            return True
        else:
            self.logger.error("üí• –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
            return False
    
    async def run_all_tests(self, test_types: list = None) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        self.logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
        
        if test_types is None:
            test_types = ['manual', 'unit', 'integration', 'performance', 'security', 'linting', 'type_checking']
        
        test_functions = {
            'manual': self.run_manual_tests,
            'unit': self.run_unit_tests,
            'integration': self.run_integration_tests,
            'performance': self.run_performance_tests,
            'security': self.run_security_tests,
            'linting': self.run_linting,
            'type_checking': self.run_type_checking
        }
        
        for test_type in test_types:
            if test_type in test_functions:
                if asyncio.iscoroutinefunction(test_functions[test_type]):
                    await test_functions[test_type]()
                else:
                    test_functions[test_type]()
        
        return self.generate_report()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞')
    parser.add_argument('--tests', nargs='+', 
                       choices=['manual', 'unit', 'integration', 'performance', 'security', 'linting', 'type_checking'],
                       help='–¢–∏–ø—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞')
    parser.add_argument('--all', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã')
    
    args = parser.parse_args()
    
    runner = TestRunner()
    runner.setup_logging()
    
    if args.all or not args.tests:
        test_types = None  # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
    else:
        test_types = args.tests
    
    success = await runner.run_all_tests(test_types)
    
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    asyncio.run(main()) 