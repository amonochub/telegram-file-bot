#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram File Bot
"""

import asyncio
import logging
import sys
from pathlib import Path
from typing import Dict, List, Optional
from datetime import datetime
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from app.config import settings
from app.services.yandex_disk_service import YandexDiskService
from app.services.cbr_rate_service import CBRRateService
from app.services.ocr_service import OCRService
from app.utils.file_validation import FileValidator


class ManualTestRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä—É—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.results: Dict[str, bool] = {}
        self.errors: List[str] = []
        self.start_time = datetime.now()
        
    async def run_all_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ä—É—á–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
        self.logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram File Bot")
        
        tests = [
            ("test_config_loading", self.test_config_loading),
            ("test_yandex_disk_connection", self.test_yandex_disk_connection),
            ("test_cbr_api_connection", self.test_cbr_api_connection),
            ("test_ocr_service", self.test_ocr_service),
            ("test_file_validation", self.test_file_validation),
            ("test_directory_structure", self.test_directory_structure),
            ("test_environment_variables", self.test_environment_variables),
        ]
        
        for test_name, test_func in tests:
            try:
                self.logger.info(f"üß™ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç: {test_name}")
                result = await test_func()
                self.results[test_name] = result
                status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
                self.logger.info(f"{status}: {test_name}")
            except Exception as e:
                self.logger.error(f"‚ùå –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
                self.results[test_name] = False
                self.errors.append(f"{test_name}: {str(e)}")
        
        return await self.generate_report()
    
    async def test_config_loading(self) -> bool:
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            assert settings.bot_token, "BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            assert settings.log_level in ["DEBUG", "INFO", "WARNING", "ERROR"], "–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"
            assert settings.max_file_size > 0, "MAX_FILE_SIZE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º"
            assert settings.cache_ttl > 0, "CACHE_TTL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º"
            
            self.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    async def test_yandex_disk_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É"""
        if not settings.yandex_disk_token:
            self.logger.warning("‚ö†Ô∏è YANDEX_DISK_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
            return True
        
        try:
            yandex_service = YandexDiskService(settings.yandex_disk_token)
            connected = await yandex_service.check_connection()
            
            if connected:
                self.logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É")
                return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É: {e}")
            return False
    
    async def test_cbr_api_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API –¶–ë–†"""
        try:
            cbr_service = CBRRateService()
            rates = await cbr_service.get_current_rates()
            
            if rates and len(rates) > 0:
                self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç: {len(rates)} –≤–∞–ª—é—Ç")
                return True
            else:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç")
                return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API –¶–ë–†: {e}")
            return False
    
    async def test_ocr_service(self) -> bool:
        """–¢–µ—Å—Ç OCR —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            ocr_service = OCRService()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            assert ocr_service is not None, "OCR —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
            self.logger.info("‚úÖ OCR —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OCR —Å–µ—Ä–≤–∏—Å–∞: {e}")
            return False
    
    async def test_file_validation(self) -> bool:
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤"""
        try:
            validator = FileValidator()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            assert validator.validate_file_size(1024 * 1024) == True, "–§–∞–π–ª 1MB –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º"
            assert validator.validate_file_size(settings.max_file_size + 1) == False, "–§–∞–π–ª –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
            
            self.logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
            return False
    
    async def test_directory_structure(self) -> bool:
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        try:
            required_dirs = ["temp", "logs"]
            required_files = ["app/main.py", "app/config.py", "requirements.txt"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for dir_name in required_dirs:
                dir_path = Path(dir_name)
                if not dir_path.exists():
                    dir_path.mkdir(exist_ok=True)
                    self.logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
            for file_path in required_files:
                if not Path(file_path).exists():
                    self.logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: {file_path}")
                    return False
            
            self.logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {e}")
            return False
    
    async def test_environment_variables(self) -> bool:
        """–¢–µ—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        try:
            required_vars = ["BOT_TOKEN"]
            optional_vars = ["YANDEX_DISK_TOKEN", "GEMINI_API_KEY", "ALLOWED_USER_ID"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            for var in required_vars:
                if not getattr(settings, var.lower(), None):
                    self.logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {var}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            for var in optional_vars:
                value = getattr(settings, var.lower(), None)
                if value:
                    self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {var}")
                else:
                    self.logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {var}")
            
            self.logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
            return False
    
    async def generate_report(self) -> bool:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        end_time = datetime.now()
        duration = end_time - self.start_time
        
        passed_tests = sum(1 for result in self.results.values() if result)
        total_tests = len(self.results)
        
        self.logger.info("\n" + "="*50)
        self.logger.info("üìä –û–¢–ß–ï–¢ –û –†–£–ß–ù–û–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
        self.logger.info("="*50)
        
        for test_name, result in self.results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            self.logger.info(f"{status}: {test_name}")
        
        self.logger.info(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        self.logger.info(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        self.logger.info(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        self.logger.info(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
        self.logger.info(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
        
        if self.errors:
            self.logger.info(f"\n‚ùå –û—à–∏–±–∫–∏:")
            for error in self.errors:
                self.logger.info(f"   - {error}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_data = {
            "timestamp": end_time.isoformat(),
            "duration_seconds": duration.total_seconds(),
            "total_tests": total_tests,
            "passed_tests": passed_tests,
            "failed_tests": total_tests - passed_tests,
            "results": self.results,
            "errors": self.errors
        }
        
        report_file = Path("logs/manual_test_report.json")
        report_file.parent.mkdir(exist_ok=True)
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, ensure_ascii=False, indent=2)
        
        self.logger.info(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
        
        success_rate = (passed_tests / total_tests) * 100 if total_tests > 0 else 0
        self.logger.info(f"\nüéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
        
        if success_rate >= 80:
            self.logger.info("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ô–î–ï–ù–û –£–°–ü–ï–®–ù–û!")
            return True
        else:
            self.logger.error("üí• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–í–ê–õ–ï–ù–û!")
            return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('logs/manual_test.log', encoding='utf-8')
        ]
    )
    
    runner = ManualTestRunner()
    success = await runner.run_all_tests()
    
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    asyncio.run(main()) 