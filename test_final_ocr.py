#!/usr/bin/env python3
"""–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""

import asyncio
from pathlib import Path
from app.services.ocr_service import perform_ocr
import fitz  # PyMuPDF


async def test_final_ocr():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç OCR —Å —Ä–µ–∞–ª—å–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Å —Ç–µ–∫—Å—Ç–æ–º
    test_file = Path("/tmp/final_ocr_test.pdf")
    
    # –°–æ–∑–¥–∞–µ–º PDF —Å —Ä—É—Å—Å–∫–∏–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
    doc = fitz.open()
    page = doc.new_page(width=595, height=842)  # A4
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ PDF
    text_lines = [
        "–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è OCR",
        "Test document for OCR processing",
        "–°—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–∞–º–∏: 12345",
        "Line with numbers: 67890",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞",
        "Text recognition verification"
    ]
    
    font = "helv"  # Helvetica
    font_size = 12
    y_position = 100
    
    for line in text_lines:
        page.insert_text((50, y_position), line, fontsize=font_size, fontname=font)
        y_position += 30
    
    doc.save(test_file)
    doc.close()
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π PDF: {test_file}")
    print(f"üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {test_file.stat().st_size} –±–∞–π—Ç")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º OCR
        print("\nüîç –ó–∞–ø—É—Å–∫ OCR...")
        output_file, extracted_text = await perform_ocr(str(test_file))
        
        print(f"‚úÖ OCR –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
        print(f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ({len(extracted_text)} —Å–∏–º–≤–æ–ª–æ–≤):")
        print("-" * 50)
        print(extracted_text)
        print("-" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
        if "–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç" in extracted_text and "Test document" in extracted_text:
            print("‚úÖ –†—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("‚ö†Ô∏è –ù–µ –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–∞
        if "12345" in extracted_text and "67890" in extracted_text:
            print("‚úÖ –ß–∏—Å–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("‚ö†Ô∏è –ß–∏—Å–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OCR: {e}")
        return False
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        if test_file.exists():
            test_file.unlink()
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
            
    return True


if __name__ == "__main__":
    print("üöÄ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 50)
    
    result = asyncio.run(test_final_ocr())
    
    if result:
        print("\nüéâ OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å OCR")
